// Copyright (c) Zefchain Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

//! Conversions from types declared in [`linera-sdk`] to types generated by
//! [`wit-bindgen-guest-rust`].

use linera_base::{
    crypto::CryptoHash,
    data_types::{Amount, Resources},
    identifiers::{Account, ApplicationId, ChainId, ChannelName, Destination, MessageId, Owner},
};

use super::wit_system_api;
use crate::SendMessageRequest;

impl From<CryptoHash> for wit_system_api::CryptoHash {
    fn from(hash_value: CryptoHash) -> Self {
        let parts = <[u64; 4]>::from(hash_value);

        wit_system_api::CryptoHash {
            part1: parts[0],
            part2: parts[1],
            part3: parts[2],
            part4: parts[3],
        }
    }
}

impl From<ChainId> for wit_system_api::CryptoHash {
    fn from(chain_id: ChainId) -> Self {
        chain_id.0.into()
    }
}

impl From<Owner> for wit_system_api::CryptoHash {
    fn from(owner: Owner) -> Self {
        wit_system_api::CryptoHash::from(owner.0)
    }
}

impl From<Amount> for wit_system_api::Amount {
    fn from(host: Amount) -> Self {
        wit_system_api::Amount {
            lower_half: host.lower_half(),
            upper_half: host.upper_half(),
        }
    }
}

impl From<Account> for wit_system_api::Account {
    fn from(account: Account) -> Self {
        wit_system_api::Account {
            chain_id: account.chain_id.0.into(),
            owner: account.owner.map(|owner| owner.into()),
        }
    }
}

impl From<ApplicationId> for wit_system_api::ApplicationId {
    fn from(application_id: ApplicationId) -> wit_system_api::ApplicationId {
        wit_system_api::ApplicationId {
            bytecode_id: application_id.bytecode_id.message_id.into(),
            creation: application_id.creation.into(),
        }
    }
}

impl From<MessageId> for wit_system_api::MessageId {
    fn from(message_id: MessageId) -> Self {
        wit_system_api::MessageId {
            chain_id: message_id.chain_id.0.into(),
            height: message_id.height.0,
            index: message_id.index,
        }
    }
}

impl<'a> From<&'a SendMessageRequest<Vec<u8>>> for wit_system_api::SendMessageRequest<'a> {
    fn from(message: &'a SendMessageRequest<Vec<u8>>) -> Self {
        Self {
            destination: (&message.destination).into(),
            authenticated: message.authenticated,
            is_tracked: message.is_tracked,
            resources: message.grant.into(),
            message: &message.message,
        }
    }
}

impl<'a> From<&'a Destination> for wit_system_api::Destination<'a> {
    fn from(destination: &'a Destination) -> Self {
        match destination {
            Destination::Recipient(chain_id) => {
                wit_system_api::Destination::Recipient(chain_id.0.into())
            }
            Destination::Subscribers(subscription) => {
                wit_system_api::Destination::Subscribers(subscription.into())
            }
        }
    }
}

impl<'a> From<&'a ChannelName> for wit_system_api::ChannelName<'a> {
    fn from(name: &'a ChannelName) -> Self {
        wit_system_api::ChannelName {
            name: name.as_ref(),
        }
    }
}

impl From<Resources> for wit_system_api::Resources {
    fn from(resources: Resources) -> Self {
        wit_system_api::Resources {
            fuel: resources.fuel,
            read_operations: resources.read_operations,
            write_operations: resources.write_operations,
            bytes_to_read: resources.bytes_to_read,
            bytes_to_write: resources.bytes_to_write,
            messages: resources.messages,
            message_size: resources.message_size,
            storage_size_delta: resources.storage_size_delta,
        }
    }
}

impl From<log::Level> for wit_system_api::LogLevel {
    fn from(level: log::Level) -> Self {
        match level {
            log::Level::Trace => wit_system_api::LogLevel::Trace,
            log::Level::Debug => wit_system_api::LogLevel::Debug,
            log::Level::Info => wit_system_api::LogLevel::Info,
            log::Level::Warn => wit_system_api::LogLevel::Warn,
            log::Level::Error => wit_system_api::LogLevel::Error,
        }
    }
}
