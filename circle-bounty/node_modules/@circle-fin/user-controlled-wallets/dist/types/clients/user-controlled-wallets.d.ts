import * as axios from 'axios';
import { AxiosRequestConfig, AxiosInstance, AxiosPromise } from 'axios';

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}
declare class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;
    constructor(param?: ConfigurationParameters);
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime: string): boolean;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface RequestArgs
 */
interface RequestArgs {
    url: string;
    options: AxiosRequestConfig;
}
/**
 *
 * @export
 * @class BaseAPI
 */
declare class BaseAPI {
    protected basePath: string;
    protected axios: AxiosInstance;
    protected configuration: Configuration | undefined;
    constructor(configuration?: Configuration, basePath?: string, axios?: AxiosInstance);
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface AccelerateTransactionForEndUserRequest
 */
interface AccelerateTransactionForEndUserRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net).
     * @type {string}
     * @memberof AccelerateTransactionForEndUserRequest
     */
    'idempotencyKey': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface AccelerateTransactionForEndUserResponse
 */
interface AccelerateTransactionForEndUserResponse {
    /**
     * Unique system generated identifier used to initiate a user challenge flow.
     * @type {string}
     * @memberof AccelerateTransactionForEndUserResponse
     */
    'challengeId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * An Account can be a Smart Contract Account (SCA) or an Externally Owned Account (EOA). To learn more about account types and the differences between the two, see the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types).  If an account type is not specified during the creation of a wallet, it will default to `EOA` (Externally Owned Account).
 * @export
 * @enum {string}
 */
declare const AccountType: {
    readonly Sca: "SCA";
    readonly Eoa: "EOA";
};
type AccountType = typeof AccountType[keyof typeof AccountType];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
declare const Blockchain: {
    readonly EthGoerli: "ETH-GOERLI";
    readonly Eth: "ETH";
    readonly AvaxFuji: "AVAX-FUJI";
    readonly Avax: "AVAX";
    readonly MaticMumbai: "MATIC-MUMBAI";
    readonly Matic: "MATIC";
};
type Blockchain = typeof Blockchain[keyof typeof Blockchain];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
declare const TokenStandard: {
    readonly Erc20: "ERC20";
    readonly Erc721: "ERC721";
    readonly Erc1155: "ERC1155";
};
type TokenStandard = typeof TokenStandard[keyof typeof TokenStandard];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface TokenResponse
 */
interface TokenResponse {
    /**
     * Unique system generated identifier of the resource.
     * @type {string}
     * @memberof TokenResponse
     */
    'id': string;
    /**
     * Blockchain name of the specified token.
     * @type {string}
     * @memberof TokenResponse
     */
    'name'?: string;
    /**
     *
     * @type {TokenStandard}
     * @memberof TokenResponse
     */
    'standard'?: TokenStandard;
    /**
     *
     * @type {Blockchain}
     * @memberof TokenResponse
     */
    'blockchain': Blockchain;
    /**
     * Number of decimal places shown in the token amount.
     * @type {number}
     * @memberof TokenResponse
     */
    'decimals'?: number;
    /**
     * Defines if the token is a native token of the specified blockchain. If TRUE, the token is a native token.
     * @type {boolean}
     * @memberof TokenResponse
     */
    'isNative': boolean;
    /**
     * Blockchain symbol of the specified token.
     * @type {string}
     * @memberof TokenResponse
     */
    'symbol'?: string;
    /**
     * Blockchain address of the specified token.
     * @type {string}
     * @memberof TokenResponse
     */
    'tokenAddress'?: string;
    /**
     * Last update date of the resource. ISO-8601 UTC date/time.
     * @type {string}
     * @memberof TokenResponse
     */
    'updateDate': string;
    /**
     * Date and time the resource was created. ISO-8601 UTC date/time.
     * @type {string}
     * @memberof TokenResponse
     */
    'createDate': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Balance
 */
interface Balance {
    /**
     * List of token balances for each token on the wallet(s).
     * @type {string}
     * @memberof Balance
     */
    'amount': string;
    /**
     *
     * @type {TokenResponse}
     * @memberof Balance
     */
    'token': TokenResponse;
    /**
     * Last update date of the resource. ISO-8601 UTC date/time.
     * @type {string}
     * @memberof Balance
     */
    'updateDate': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CancelTransactionForEndUserRequest
 */
interface CancelTransactionForEndUserRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net).
     * @type {string}
     * @memberof CancelTransactionForEndUserRequest
     */
    'idempotencyKey': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CancelTransactionForEndUserResponse
 */
interface CancelTransactionForEndUserResponse {
    /**
     * Unique system generated identifier used to initiate a user challenge flow.
     * @type {string}
     * @memberof CancelTransactionForEndUserResponse
     */
    'challengeId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface Challenge
 */
interface Challenge {
    /**
     * Unique system generated identifier of the resource.
     * @type {string}
     * @memberof Challenge
     */
    'id': string;
    /**
     * For type CREATE_WALLET, the wallet id associated with the request. For types CREATE_TRANSACTION, ACCELERATE_TRANSACTION, and CANCEL_TRANSACTION, the transaction id associated with the request.
     * @type {Array<string>}
     * @memberof Challenge
     */
    'correlationIds'?: Array<string>;
    /**
     * Indicates the failure reason of a challenge. Only present for challenges in FAILED status.
     * @type {number}
     * @memberof Challenge
     */
    'errorCode'?: number;
    /**
     * Description of the error or error reason. Only present for challenges in FAILED status.
     * @type {string}
     * @memberof Challenge
     */
    'errorMessage'?: string;
    /**
     *
     * @type {string}
     * @memberof Challenge
     */
    'status': ChallengeStatusEnum;
    /**
     * The challenge type
     * @type {string}
     * @memberof Challenge
     */
    'type': ChallengeTypeEnum;
}
declare const ChallengeStatusEnum: {
    readonly Pending: "PENDING";
    readonly InProgress: "IN_PROGRESS";
    readonly Complete: "COMPLETE";
    readonly Failed: "FAILED";
    readonly Expired: "EXPIRED";
};
type ChallengeStatusEnum = typeof ChallengeStatusEnum[keyof typeof ChallengeStatusEnum];
declare const ChallengeTypeEnum: {
    readonly Empty: "";
    readonly Initialize: "INITIALIZE";
    readonly SetPin: "SET_PIN";
    readonly ChangePin: "CHANGE_PIN";
    readonly SetSecurityQuestions: "SET_SECURITY_QUESTIONS";
    readonly CreateWallet: "CREATE_WALLET";
    readonly RestorePin: "RESTORE_PIN";
    readonly CreateTransaction: "CREATE_TRANSACTION";
    readonly AccelerateTransaction: "ACCELERATE_TRANSACTION";
    readonly CancelTransaction: "CANCEL_TRANSACTION";
    readonly ContractExecution: "CONTRACT_EXECUTION";
    readonly SignMessage: "SIGN_MESSAGE";
    readonly SignTypeddata: "SIGN_TYPEDDATA";
};
type ChallengeTypeEnum = typeof ChallengeTypeEnum[keyof typeof ChallengeTypeEnum];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ChangePinRequest
 */
interface ChangePinRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net).
     * @type {string}
     * @memberof ChangePinRequest
     */
    'idempotencyKey': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ChangePinResponse
 */
interface ChangePinResponse {
    /**
     * Unique system generated identifier used to initiate a user challenge flow.
     * @type {string}
     * @memberof ChangePinResponse
     */
    'challengeId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A dynamic blockchain fee level setting (`LOW`, `MEDIUM`, or `HIGH`) that will be used to pay gas for the transaction. Calculated based on network traffic, supply of validators, and demand for transaction verification. Cannot be used with `gasLimit`, `gasPrice`, `baseFee`, `priorityFee`, or `maxFee`. Estimates for each fee level can be obtained through the Estimate fee API call.
 * @export
 * @enum {string}
 */
declare const FeeLevel: {
    readonly Low: "LOW";
    readonly Medium: "MEDIUM";
    readonly High: "HIGH";
};
type FeeLevel = typeof FeeLevel[keyof typeof FeeLevel];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ContractExecutionTxnPinCodeRequest
 */
interface ContractExecutionTxnPinCodeRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net).
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'idempotencyKey': string;
    /**
     * The contract ABI function signature or `callData` field is required for interacting with the smart contract. The ABI function signature cannot be used simultaneously with `callData`. e.g. burn(uint256)
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'abiFunctionSignature'?: string;
    /**
     * The contract ABI function signature parameters for executing the contract interaction. Supported parameter types include string, integer, boolean, and array. These parameters should be used exclusively with the abiFunctionSignature and cannot be used with `callData`.
     * @type {Array<string>}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'abiParameters'?: Array<string>;
    /**
     * The raw transaction data, must be an even-length hexadecimal string with the `0x` prefix, to be executed. It is important to note that the usage of `callData` is mutually exclusive with the `abiFunctionSignature` and `abiParameters`. Therefore, `callData` cannot be utilized simultaneously with either `abiFunctionSignature` or `abiParameters`.
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'callData'?: string;
    /**
     * The amount of native token that will be sent to the contract abi execution. Optional field for payable api only, if not provided, no native token will be sent.
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'amount'?: string;
    /**
     * The blockchain address of the contract to be executed.
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'contractAddress': string;
    /**
     *
     * @type {FeeLevel}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'feeLevel'?: FeeLevel;
    /**
     * The maximum units of gas to be used for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the estimate fee API call.
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'gasLimit'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price of gas, in gwei, to be used per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `baseFee`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the estimate fee API call.
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'gasPrice'?: string;
    /**
     * The maximum price per unit of gas (see `gasLimit`), in gwei. Requires `baseFee`, `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the estimate fee API call.
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'maxFee'?: string;
    /**
     * The “tip”, in gwei, to be added to the baseFee as an incentive for validators. Requires `baseFee`, `maxFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the estimate fee API call.
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'priorityFee'?: string;
    /**
     * Optional reference or description used to identify the transaction.
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'refId'?: string;
    /**
     * Unique system generated identifier of the wallet. Required when source Address and blockchain is not provided. Mutually exclusive
     * @type {string}
     * @memberof ContractExecutionTxnPinCodeRequest
     */
    'walletId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateContractExecutionTransactionForEndUserResponse
 */
interface CreateContractExecutionTransactionForEndUserResponse {
    /**
     * Unique system generated identifier used to initiate a user challenge flow.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForEndUserResponse
     */
    'challengeId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface MetadataField
 */
interface MetadataField {
    /**
     * Name or description associated with the wallet.
     * @type {string}
     * @memberof MetadataField
     */
    'name'?: string;
    /**
     * Optional reference or description used to identify the wallet.
     * @type {string}
     * @memberof MetadataField
     */
    'refId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateEndUserWalletRequest
 */
interface CreateEndUserWalletRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net).
     * @type {string}
     * @memberof CreateEndUserWalletRequest
     */
    'idempotencyKey': string;
    /**
     *
     * @type {AccountType}
     * @memberof CreateEndUserWalletRequest
     */
    'accountType'?: AccountType;
    /**
     * Blockchain(s) the requested wallets will be created on.
     * @type {Array<Blockchain>}
     * @memberof CreateEndUserWalletRequest
     */
    'blockchains': Array<Blockchain>;
    /**
     * List of metadata fields to associate with the corresponding wallet.
     * @type {Array<MetadataField>}
     * @memberof CreateEndUserWalletRequest
     */
    'metadata'?: Array<MetadataField>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateEndUserWalletResponse
 */
interface CreateEndUserWalletResponse {
    /**
     * Unique system generated identifier used to initiate a user challenge flow.
     * @type {string}
     * @memberof CreateEndUserWalletResponse
     */
    'challengeId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface EstimatedTransactionFee
 */
interface EstimatedTransactionFee {
    /**
     * The base price per unit of gas (see `gasLimit`), in gwei, required to execute the transaction. Determined by the blockchain protocol. Requires `priorityFee`, `maxFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the estimate fee API call.
     * @type {string}
     * @memberof EstimatedTransactionFee
     */
    'baseFee'?: string;
    /**
     * The maximum units of gas to be used for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the estimate fee API call.
     * @type {string}
     * @memberof EstimatedTransactionFee
     */
    'gasLimit'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price of gas, in gwei, to be used per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `baseFee`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the estimate fee API call.
     * @type {string}
     * @memberof EstimatedTransactionFee
     */
    'gasPrice'?: string;
    /**
     * The maximum price per unit of gas (see `gasLimit`), in gwei. Requires `baseFee`, `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the estimate fee API call.
     * @type {string}
     * @memberof EstimatedTransactionFee
     */
    'maxFee'?: string;
    /**
     * The “tip”, in gwei, to be added to the baseFee as an incentive for validators. Requires `baseFee`, `maxFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the estimate fee API call.
     * @type {string}
     * @memberof EstimatedTransactionFee
     */
    'priorityFee'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EstimateTransactionFeeResponse
 */
interface EstimateTransactionFeeResponse {
    /**
     *
     * @type {EstimatedTransactionFee}
     * @memberof EstimateTransactionFeeResponse
     */
    'high'?: EstimatedTransactionFee;
    /**
     *
     * @type {EstimatedTransactionFee}
     * @memberof EstimateTransactionFeeResponse
     */
    'low'?: EstimatedTransactionFee;
    /**
     *
     * @type {EstimatedTransactionFee}
     * @memberof EstimateTransactionFeeResponse
     */
    'medium'?: EstimatedTransactionFee;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateTransferEstimateFee200Response
 */
interface CreateTransferEstimateFee200Response {
    /**
     *
     * @type {EstimateTransactionFeeResponse}
     * @memberof CreateTransferEstimateFee200Response
     */
    'data'?: EstimateTransactionFeeResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateTransferTransactionForEndUserRequest
 */
interface CreateTransferTransactionForEndUserRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net).
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'idempotencyKey': string;
    /**
     * Transfer amount in decimal number format.
     * @type {Array<string>}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'amounts'?: Array<string>;
    /**
     * The destination blockchain address for the transaction.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'destinationAddress': string;
    /**
     *
     * @type {FeeLevel}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'feeLevel'?: FeeLevel;
    /**
     * The maximum units of gas to be used for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the estimate fee API call.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'gasLimit'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price of gas, in gwei, to be used per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `baseFee`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the estimate fee API call.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'gasPrice'?: string;
    /**
     * The maximum price per unit of gas (see `gasLimit`), in gwei. Requires `baseFee`, `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the estimate fee API call.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'maxFee'?: string;
    /**
     * The “tip”, in gwei, to be added to the baseFee as an incentive for validators. Requires `baseFee`, `maxFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the estimate fee API call.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'priorityFee'?: string;
    /**
     * List of NFT token ids corresponding with the NFTs to be transferred. Batch transfers are only supported for ERC-1155 tokens.
     * @type {Array<string>}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'nftTokenIds'?: Array<string>;
    /**
     * Optional reference or description used to identify the transaction.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'refId'?: string;
    /**
     * System generated identifier of the token.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'tokenId': string;
    /**
     * Unique system generated identifier of the wallet. Required when source Address and blockchain is not provided. Mutually exclusive
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'walletId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateTransferTransactionForEndUserResponse
 */
interface CreateTransferTransactionForEndUserResponse {
    /**
     * Unique system generated identifier used to initiate a user challenge flow.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserResponse
     */
    'challengeId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface RestorePinResponse
 */
interface RestorePinResponse {
    /**
     * Unique system generated identifier used to initiate a user challenge flow.
     * @type {string}
     * @memberof RestorePinResponse
     */
    'challengeId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateUserPinRestoreChallenge200Response
 */
interface CreateUserPinRestoreChallenge200Response {
    /**
     *
     * @type {RestorePinResponse}
     * @memberof CreateUserPinRestoreChallenge200Response
     */
    'data'?: RestorePinResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateUserRequest
 */
interface CreateUserRequest {
    /**
     * Unique system generated identifier for the user.
     * @type {string}
     * @memberof CreateUserRequest
     */
    'userId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateUserTransactionAccelerateChallenge200Response
 */
interface CreateUserTransactionAccelerateChallenge200Response {
    /**
     *
     * @type {AccelerateTransactionForEndUserResponse}
     * @memberof CreateUserTransactionAccelerateChallenge200Response
     */
    'data'?: AccelerateTransactionForEndUserResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateUserTransactionCancelChallenge200Response
 */
interface CreateUserTransactionCancelChallenge200Response {
    /**
     *
     * @type {CancelTransactionForEndUserResponse}
     * @memberof CreateUserTransactionCancelChallenge200Response
     */
    'data'?: CancelTransactionForEndUserResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateUserTransactionContractExecutionChallenge200Response
 */
interface CreateUserTransactionContractExecutionChallenge200Response {
    /**
     *
     * @type {CreateContractExecutionTransactionForEndUserResponse}
     * @memberof CreateUserTransactionContractExecutionChallenge200Response
     */
    'data'?: CreateContractExecutionTransactionForEndUserResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateUserTransactionTransferChallenge200Response
 */
interface CreateUserTransactionTransferChallenge200Response {
    /**
     *
     * @type {CreateTransferTransactionForEndUserResponse}
     * @memberof CreateUserTransactionTransferChallenge200Response
     */
    'data'?: CreateTransferTransactionForEndUserResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateUserWallet200Response
 */
interface CreateUserWallet200Response {
    /**
     *
     * @type {CreateEndUserWalletResponse}
     * @memberof CreateUserWallet200Response
     */
    'data'?: CreateEndUserWalletResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SetPinResponse
 */
interface SetPinResponse {
    /**
     * Unique system generated identifier used to initiate a user challenge flow.
     * @type {string}
     * @memberof SetPinResponse
     */
    'challengeId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateUserWithPinChallenge200Response
 */
interface CreateUserWithPinChallenge200Response {
    /**
     *
     * @type {SetPinResponse}
     * @memberof CreateUserWithPinChallenge200Response
     */
    'data'?: SetPinResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ValidateAddressResponse
 */
interface ValidateAddressResponse {
    /**
     *
     * @type {boolean}
     * @memberof ValidateAddressResponse
     */
    'isValid': boolean;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateValidateAddress200Response
 */
interface CreateValidateAddress200Response {
    /**
     *
     * @type {ValidateAddressResponse}
     * @memberof CreateValidateAddress200Response
     */
    'data'?: ValidateAddressResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
declare const CustodyType: {
    readonly Developer: "DEVELOPER";
    readonly Enduser: "ENDUSER";
};
type CustodyType = typeof CustodyType[keyof typeof CustodyType];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
declare const EndUserStatus: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
type EndUserStatus = typeof EndUserStatus[keyof typeof EndUserStatus];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface PinSecurityDetails
 */
interface PinSecurityDetails {
    /**
     * FailedAttempts the number of times a user has entered an invalid pin code.
     * @type {number}
     * @memberof PinSecurityDetails
     */
    'failedAttempts'?: number;
    /**
     * The date and time when the pin code has been locked.
     * @type {string}
     * @memberof PinSecurityDetails
     */
    'lockedDate'?: string;
    /**
     * The date and time when the pin code will be unlocked.
     * @type {string}
     * @memberof PinSecurityDetails
     */
    'lockedExpiryDate'?: string;
    /**
     * This is the last date and time when the lock was unlocked by admin manually.
     * @type {string}
     * @memberof PinSecurityDetails
     */
    'lastLockOverrideDate'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Status of the user PIN code. PIN must be in ENABLED state to authorize requests.
 * @export
 * @enum {string}
 */
declare const PinStatus: {
    readonly Enabled: "ENABLED";
    readonly Unset: "UNSET";
    readonly Locked: "LOCKED";
};
type PinStatus = typeof PinStatus[keyof typeof PinStatus];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EndUser
 */
interface EndUser {
    /**
     * Unique system generated identifier of the resource.
     * @type {string}
     * @memberof EndUser
     */
    'id'?: string;
    /**
     * Date and time the resource was created. ISO-8601 UTC date/time.
     * @type {string}
     * @memberof EndUser
     */
    'createDate'?: string;
    /**
     *
     * @type {PinStatus}
     * @memberof EndUser
     */
    'pinStatus'?: PinStatus;
    /**
     *
     * @type {EndUserStatus}
     * @memberof EndUser
     */
    'status'?: EndUserStatus;
    /**
     *
     * @type {string}
     * @memberof EndUser
     */
    'securityQuestionStatus'?: EndUserSecurityQuestionStatusEnum;
    /**
     *
     * @type {PinSecurityDetails}
     * @memberof EndUser
     */
    'pinDetails'?: PinSecurityDetails;
    /**
     *
     * @type {PinSecurityDetails}
     * @memberof EndUser
     */
    'securityQuestionDetails'?: PinSecurityDetails;
}
declare const EndUserSecurityQuestionStatusEnum: {
    readonly Enabled: "ENABLED";
    readonly Unset: "UNSET";
    readonly Locked: "LOCKED";
};
type EndUserSecurityQuestionStatusEnum = typeof EndUserSecurityQuestionStatusEnum[keyof typeof EndUserSecurityQuestionStatusEnum];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EstimateContractExecutionTransactionFeeRequest
 */
interface EstimateContractExecutionTransactionFeeRequest {
    /**
     * The contract ABI function signature or `callData` field is required for interacting with the smart contract. The ABI function signature cannot be used simultaneously with `callData`. e.g. burn(uint256)
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'abiFunctionSignature': string;
    /**
     * The contract ABI function signature parameters for executing the contract interaction. Supported parameter types include string, integer, boolean, and array. These parameters should be used exclusively with the abiFunctionSignature and cannot be used with `callData`.
     * @type {Array<string>}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'abiParameters'?: Array<string>;
    /**
     * The raw transaction data, must be an even-length hexadecimal string with the `0x` prefix, to be executed. It is important to note that the usage of `callData` is mutually exclusive with the `abiFunctionSignature` and `abiParameters`. Therefore, `callData` cannot be utilized simultaneously with either `abiFunctionSignature` or `abiParameters`.
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'callData'?: string;
    /**
     * The amount of native token that will be sent to the contract abi execution. Optional field for payable api only, if not provided, no native token will be sent.
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'amount'?: string;
    /**
     *
     * @type {Blockchain}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'blockchain'?: Blockchain;
    /**
     * The blockchain address of the contract to be executed.
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'contractAddress': string;
    /**
     * The source blockchain address of the transaction.
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'sourceAddress'?: string;
    /**
     * Unique system generated identifier of the wallet. Required when source Address and blockchain is not provided. Mutually exclusive
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'walletId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface EstimateTransferTransactionFeeRequest
 */
interface EstimateTransferTransactionFeeRequest {
    /**
     * Transfer amount in decimal number format.
     * @type {Array<string>}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'amounts': Array<string>;
    /**
     * The destination blockchain address for the transaction.
     * @type {string}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'destinationAddress': string;
    /**
     * List of NFT token ids corresponding with the NFTs to be transferred. Batch transfers are only supported for ERC-1155 tokens.
     * @type {Array<string>}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'nftTokenIds'?: Array<string>;
    /**
     * The source blockchain address of the transaction.
     * @type {string}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'sourceAddress'?: string;
    /**
     * System generated identifier of the token.
     * @type {string}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'tokenId': string;
    /**
     * Unique system generated identifier of the wallet. Required when source Address and blockchain is not provided. Mutually exclusive
     * @type {string}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'walletId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ExtGetAllEndUsersResponse
 */
interface ExtGetAllEndUsersResponse {
    /**
     *
     * @type {Array<EndUser>}
     * @memberof ExtGetAllEndUsersResponse
     */
    'users'?: Array<EndUser>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
declare const WalletState: {
    readonly Live: "LIVE";
    readonly Frozen: "FROZEN";
};
type WalletState = typeof WalletState[keyof typeof WalletState];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface WalletResponse
 */
interface WalletResponse {
    /**
     * Unique system generated identifier of the resource.
     * @type {string}
     * @memberof WalletResponse
     */
    'id': string;
    /**
     * The blockchain address generated upon wallet creation.
     * @type {string}
     * @memberof WalletResponse
     */
    'address': string;
    /**
     *
     * @type {Blockchain}
     * @memberof WalletResponse
     */
    'blockchain': Blockchain;
    /**
     * Date and time the resource was created. ISO-8601 UTC date/time.
     * @type {string}
     * @memberof WalletResponse
     */
    'createDate': string;
    /**
     *
     * @type {CustodyType}
     * @memberof WalletResponse
     */
    'custodyType': CustodyType;
    /**
     *
     * @type {AccountType}
     * @memberof WalletResponse
     */
    'accountType'?: AccountType;
    /**
     * Name or description associated with the wallet.
     * @type {string}
     * @memberof WalletResponse
     */
    'name'?: string;
    /**
     * Optional reference or description used to identify the wallet.
     * @type {string}
     * @memberof WalletResponse
     */
    'refId'?: string;
    /**
     *
     * @type {WalletState}
     * @memberof WalletResponse
     */
    'state': WalletState;
    /**
     * Last update date of the resource. ISO-8601 UTC date/time.
     * @type {string}
     * @memberof WalletResponse
     */
    'updateDate': string;
    /**
     * Unique system generated identifier for the user.
     * @type {string}
     * @memberof WalletResponse
     */
    'userId'?: string;
    /**
     * Unique system generated identifier of the wallet\'s parent wallet set. under.
     * @type {string}
     * @memberof WalletResponse
     */
    'walletSetId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ExtGetAllWalletsResponse
 */
interface ExtGetAllWalletsResponse {
    /**
     *
     * @type {Array<WalletResponse>}
     * @memberof ExtGetAllWalletsResponse
     */
    'wallets'?: Array<WalletResponse>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ExtGetWalletByIDResponse
 */
interface ExtGetWalletByIDResponse {
    /**
     *
     * @type {WalletResponse}
     * @memberof ExtGetWalletByIDResponse
     */
    'wallet'?: WalletResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ExtUpdateWalletMetadataRequest
 */
interface ExtUpdateWalletMetadataRequest {
    /**
     *
     * @type {string}
     * @memberof ExtUpdateWalletMetadataRequest
     */
    'name'?: string;
    /**
     * Optional reference or description used to identify the wallet.
     * @type {string}
     * @memberof ExtUpdateWalletMetadataRequest
     */
    'refId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ExtWalletResponseWallet
 */
interface ExtWalletResponseWallet {
    /**
     * Unique system generated identifier of the resource.
     * @type {string}
     * @memberof ExtWalletResponseWallet
     */
    'id'?: string;
    /**
     * The blockchain address generated upon wallet creation.
     * @type {string}
     * @memberof ExtWalletResponseWallet
     */
    'address'?: string;
    /**
     *
     * @type {Blockchain}
     * @memberof ExtWalletResponseWallet
     */
    'blockchain'?: Blockchain;
    /**
     * Date and time the resource was created. ISO-8601 UTC date/time.
     * @type {string}
     * @memberof ExtWalletResponseWallet
     */
    'createDate'?: string;
    /**
     *
     * @type {CustodyType}
     * @memberof ExtWalletResponseWallet
     */
    'custodyType'?: CustodyType;
    /**
     *
     * @type {AccountType}
     * @memberof ExtWalletResponseWallet
     */
    'accountType'?: AccountType;
    /**
     * Name or description associated with the wallet.
     * @type {string}
     * @memberof ExtWalletResponseWallet
     */
    'name'?: string;
    /**
     * Optional reference or description used to identify the wallet.
     * @type {string}
     * @memberof ExtWalletResponseWallet
     */
    'refId'?: string;
    /**
     *
     * @type {WalletState}
     * @memberof ExtWalletResponseWallet
     */
    'state'?: WalletState;
    /**
     * Last update date of the resource. ISO-8601 UTC date/time.
     * @type {string}
     * @memberof ExtWalletResponseWallet
     */
    'updateDate'?: string;
    /**
     * Unique system generated identifier for the user.
     * @type {string}
     * @memberof ExtWalletResponseWallet
     */
    'userId'?: string;
    /**
     * Unique system generated identifier of the wallet\'s parent wallet set. under.
     * @type {string}
     * @memberof ExtWalletResponseWallet
     */
    'walletSetId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ExtWalletResponse
 */
interface ExtWalletResponse {
    /**
     *
     * @type {ExtWalletResponseWallet}
     * @memberof ExtWalletResponse
     */
    'wallet'?: ExtWalletResponseWallet;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface GenerateUserTokenRequest
 */
interface GenerateUserTokenRequest {
    /**
     * Unique system generated identifier for the user.
     * @type {string}
     * @memberof GenerateUserTokenRequest
     */
    'userId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface GenerateUserTokenResponse
 */
interface GenerateUserTokenResponse {
    /**
     * Unique system generated JWT session token. The token will expire after 60 minutes.
     * @type {string}
     * @memberof GenerateUserTokenResponse
     */
    'userToken': string;
    /**
     * Encryption key to be used with the SDK for initiating user challenges.
     * @type {string}
     * @memberof GenerateUserTokenResponse
     */
    'encryptionKey'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetBalancesResponse
 */
interface GetBalancesResponse {
    /**
     * List of token balances for each token on the wallet(s).
     * @type {Array<Balance>}
     * @memberof GetBalancesResponse
     */
    'tokenBalances'?: Array<Balance>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetEndUserByIDResponse
 */
interface GetEndUserByIDResponse {
    /**
     *
     * @type {EndUser}
     * @memberof GetEndUserByIDResponse
     */
    'user'?: EndUser;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetEndUserChallengeByIDResponse
 */
interface GetEndUserChallengeByIDResponse {
    /**
     *
     * @type {Challenge}
     * @memberof GetEndUserChallengeByIDResponse
     */
    'challenge'?: Challenge;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetEndUserChallengesResponse
 */
interface GetEndUserChallengesResponse {
    /**
     *
     * @type {Array<Challenge>}
     * @memberof GetEndUserChallengesResponse
     */
    'challenges'?: Array<Challenge>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Nft
 */
interface Nft {
    /**
     * Amount of NFTs on a wallet. For non-fungible token standards, like ERC721, amount will always be “1”; for semi-fungible token standards like ERC1155, amount will correspond to the number of tokens.
     * @type {string}
     * @memberof Nft
     */
    'amount': string;
    /**
     * The metadata of the NFT.
     * @type {string}
     * @memberof Nft
     */
    'metadata'?: string;
    /**
     * The NFT token ID.
     * @type {string}
     * @memberof Nft
     */
    'nftTokenId': string;
    /**
     *
     * @type {TokenResponse}
     * @memberof Nft
     */
    'token': TokenResponse;
    /**
     * Last update date of the resource. ISO-8601 UTC date/time.
     * @type {string}
     * @memberof Nft
     */
    'updateDate': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetNftsResponse
 */
interface GetNftsResponse {
    /**
     *
     * @type {Array<Nft>}
     * @memberof GetNftsResponse
     */
    'nfts'?: Array<Nft>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetTokenByIDResponse
 */
interface GetTokenByIDResponse {
    /**
     *
     * @type {TokenResponse}
     * @memberof GetTokenByIDResponse
     */
    'token'?: TokenResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetTokenId200Response
 */
interface GetTokenId200Response {
    /**
     *
     * @type {GetTokenByIDResponse}
     * @memberof GetTokenId200Response
     */
    'data'?: GetTokenByIDResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Operation type of the transaction.
 * @export
 * @enum {string}
 */
declare const Operation: {
    readonly Transfer: "TRANSFER";
    readonly ContractExecution: "CONTRACT_EXECUTION";
    readonly ContractDeployment: "CONTRACT_DEPLOYMENT";
};
type Operation = typeof Operation[keyof typeof Operation];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Current state of the transaction.
 * @export
 * @enum {string}
 */
declare const TransactionState: {
    readonly Initiated: "INITIATED";
    readonly PendingRiskScreening: "PENDING_RISK_SCREENING";
    readonly Denied: "DENIED";
    readonly Queued: "QUEUED";
    readonly Sent: "SENT";
    readonly Confirmed: "CONFIRMED";
    readonly Complete: "COMPLETE";
    readonly Failed: "FAILED";
    readonly Cancelled: "CANCELLED";
};
type TransactionState = typeof TransactionState[keyof typeof TransactionState];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
declare const TransactionType: {
    readonly Inbound: "INBOUND";
    readonly Outbound: "OUTBOUND";
};
type TransactionType = typeof TransactionType[keyof typeof TransactionType];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Transaction
 */
interface Transaction {
    /**
     * Unique system generated identifier of the resource.
     * @type {string}
     * @memberof Transaction
     */
    'id': string;
    /**
     * The contract ABI function signature or `callData` field is required for interacting with the smart contract. The ABI function signature cannot be used simultaneously with `callData`. e.g. burn(uint256)
     * @type {string}
     * @memberof Transaction
     */
    'abiFunctionSignature'?: string;
    /**
     * The contract ABI function signature parameters for executing the contract interaction. Supported parameter types include string, integer, boolean, and array. These parameters should be used exclusively with the abiFunctionSignature and cannot be used with `callData`.
     * @type {Array<string>}
     * @memberof Transaction
     */
    'abiParameters'?: Array<string>;
    /**
     * Transfer amount in decimal number format.
     * @type {Array<string>}
     * @memberof Transaction
     */
    'amounts'?: Array<string>;
    /**
     * Transaction amount in USD decimal format.
     * @type {string}
     * @memberof Transaction
     */
    'amountInUSD'?: string;
    /**
     * Identifier for the block that includes the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'blockHash'?: string;
    /**
     * Block height of the transaction, representing the number of blockchain confirmations.
     * @type {number}
     * @memberof Transaction
     */
    'blockHeight'?: number;
    /**
     *
     * @type {Blockchain}
     * @memberof Transaction
     */
    'blockchain': Blockchain;
    /**
     * The blockchain address of the contract to be executed.
     * @type {string}
     * @memberof Transaction
     */
    'contractAddress'?: string;
    /**
     * Date and time the resource was created. ISO-8601 UTC date/time.
     * @type {string}
     * @memberof Transaction
     */
    'createDate': string;
    /**
     *
     * @type {CustodyType}
     * @memberof Transaction
     */
    'custodyType'?: CustodyType;
    /**
     * The destination blockchain address for the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'destinationAddress'?: string;
    /**
     * Description of the error. Only present for transactions in `FAILED` state.
     * @type {string}
     * @memberof Transaction
     */
    'errorReason'?: string;
    /**
     *
     * @type {EstimatedTransactionFee}
     * @memberof Transaction
     */
    'estimatedFee'?: EstimatedTransactionFee;
    /**
     *
     * @type {FeeLevel}
     * @memberof Transaction
     */
    'feeLevel'?: FeeLevel;
    /**
     * Date the transaction was first confirmed in a block. ISO-8601 UTC date/time.
     * @type {string}
     * @memberof Transaction
     */
    'firstConfirmDate'?: string;
    /**
     * Gas fee, in native token, paid to the network for the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'networkFee'?: string;
    /**
     * Gas fee, in USD, paid to the network for the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'networkFeeInUSD'?: string;
    /**
     * List of Nfts, in JSON string format, associated with the transaction.
     * @type {Array<string>}
     * @memberof Transaction
     */
    'nfts'?: Array<string>;
    /**
     *
     * @type {Operation}
     * @memberof Transaction
     */
    'operation'?: Operation;
    /**
     * Optional reference or description used to identify the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'refId'?: string;
    /**
     * The source blockchain address of the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'sourceAddress'?: string;
    /**
     *
     * @type {TransactionState}
     * @memberof Transaction
     */
    'state': TransactionState;
    /**
     * System generated identifier of the token.
     * @type {string}
     * @memberof Transaction
     */
    'tokenId'?: string;
    /**
     *
     * @type {TransactionType}
     * @memberof Transaction
     */
    'transactionType': TransactionType;
    /**
     * Blockchain generated identifier of the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'txHash'?: string;
    /**
     * Last update date of the resource. ISO-8601 UTC date/time.
     * @type {string}
     * @memberof Transaction
     */
    'updateDate': string;
    /**
     * Unique system generated identifier for the user.
     * @type {string}
     * @memberof Transaction
     */
    'userId'?: string;
    /**
     * Unique system generated identifier of the wallet. Required when source Address and blockchain is not provided. Mutually exclusive
     * @type {string}
     * @memberof Transaction
     */
    'walletId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetTransactionByIDResponse
 */
interface GetTransactionByIDResponse {
    /**
     *
     * @type {Transaction}
     * @memberof GetTransactionByIDResponse
     */
    'transaction'?: Transaction;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetTransaction200Response
 */
interface GetTransaction200Response {
    /**
     *
     * @type {GetTransactionByIDResponse}
     * @memberof GetTransaction200Response
     */
    'data'?: GetTransactionByIDResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetTransactionsResponse
 */
interface GetTransactionsResponse {
    /**
     *
     * @type {Array<Transaction>}
     * @memberof GetTransactionsResponse
     */
    'transactions'?: Array<Transaction>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetUser200Response
 */
interface GetUser200Response {
    /**
     *
     * @type {GetEndUserByIDResponse}
     * @memberof GetUser200Response
     */
    'data'?: GetEndUserByIDResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetUserByToken200Response
 */
interface GetUserByToken200Response {
    /**
     *
     * @type {EndUser}
     * @memberof GetUserByToken200Response
     */
    'data'?: EndUser;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetUserChallenge200Response
 */
interface GetUserChallenge200Response {
    /**
     *
     * @type {GetEndUserChallengeByIDResponse}
     * @memberof GetUserChallenge200Response
     */
    'data'?: GetEndUserChallengeByIDResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetUserToken200Response
 */
interface GetUserToken200Response {
    /**
     *
     * @type {GenerateUserTokenResponse}
     * @memberof GetUserToken200Response
     */
    'data'?: GenerateUserTokenResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetWallet200Response
 */
interface GetWallet200Response {
    /**
     *
     * @type {ExtGetWalletByIDResponse}
     * @memberof GetWallet200Response
     */
    'data'?: ExtGetWalletByIDResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListTransactions200Response
 */
interface ListTransactions200Response {
    /**
     *
     * @type {GetTransactionsResponse}
     * @memberof ListTransactions200Response
     */
    'data'?: GetTransactionsResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListUserChallenges200Response
 */
interface ListUserChallenges200Response {
    /**
     *
     * @type {GetEndUserChallengesResponse}
     * @memberof ListUserChallenges200Response
     */
    'data'?: GetEndUserChallengesResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListUsers200Response
 */
interface ListUsers200Response {
    /**
     *
     * @type {ExtGetAllEndUsersResponse}
     * @memberof ListUsers200Response
     */
    'data'?: ExtGetAllEndUsersResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListWalletBallance200Response
 */
interface ListWalletBallance200Response {
    /**
     *
     * @type {GetBalancesResponse}
     * @memberof ListWalletBallance200Response
     */
    'data'?: GetBalancesResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListWalletNfts200Response
 */
interface ListWalletNfts200Response {
    /**
     *
     * @type {GetNftsResponse}
     * @memberof ListWalletNfts200Response
     */
    'data'?: GetNftsResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListWallets200Response
 */
interface ListWallets200Response {
    /**
     *
     * @type {ExtGetAllWalletsResponse}
     * @memberof ListWallets200Response
     */
    'data'?: ExtGetAllWalletsResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ModelError
 */
interface ModelError {
    /**
     * Code is the error code
     * @type {number}
     * @memberof ModelError
     */
    'code'?: number;
    /**
     * Message is the error message
     * @type {string}
     * @memberof ModelError
     */
    'message'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface RestorePinRequest
 */
interface RestorePinRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net).
     * @type {string}
     * @memberof RestorePinRequest
     */
    'idempotencyKey': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface SetPinAndInitWalletRequest
 */
interface SetPinAndInitWalletRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net).
     * @type {string}
     * @memberof SetPinAndInitWalletRequest
     */
    'idempotencyKey': string;
    /**
     *
     * @type {AccountType}
     * @memberof SetPinAndInitWalletRequest
     */
    'accountType'?: AccountType;
    /**
     * Blockchain(s) the requested wallets will be created on.
     * @type {Array<Blockchain>}
     * @memberof SetPinAndInitWalletRequest
     */
    'blockchains'?: Array<Blockchain>;
    /**
     * List of metadata fields to associate with the corresponding wallet.
     * @type {Array<MetadataField>}
     * @memberof SetPinAndInitWalletRequest
     */
    'metadata'?: Array<MetadataField>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SetPinRequest
 */
interface SetPinRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net).
     * @type {string}
     * @memberof SetPinRequest
     */
    'idempotencyKey': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SignMessageForEndUserRequest
 */
interface SignMessageForEndUserRequest {
    /**
     * Unique system generated identifier of the wallet. Required when source Address and blockchain is not provided. Mutually exclusive
     * @type {string}
     * @memberof SignMessageForEndUserRequest
     */
    'walletId': string;
    /**
     * Indicator of whether the input message is encoded by hex. If TRUE, then the message should be a hex string. By default, it is False.
     * @type {boolean}
     * @memberof SignMessageForEndUserRequest
     */
    'encodedByHex'?: boolean;
    /**
     * The user friendly message that needs to be signed. If it is a hex string, encodedByHex needs to be TRUE. The hex string should start with “0x” and have even length.
     * @type {string}
     * @memberof SignMessageForEndUserRequest
     */
    'message': string;
    /**
     * The human readable explanation for this sign action. Useful for presenting with extra information.
     * @type {string}
     * @memberof SignMessageForEndUserRequest
     */
    'memo'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SignMessageForEndUserResponse
 */
interface SignMessageForEndUserResponse {
    /**
     * Unique system generated identifier used to initiate a user challenge flow.
     * @type {string}
     * @memberof SignMessageForEndUserResponse
     */
    'challengeId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SignTypedDataForEndUserRequest
 */
interface SignTypedDataForEndUserRequest {
    /**
     * Unique system generated identifier of the wallet. Required when source Address and blockchain is not provided. Mutually exclusive
     * @type {string}
     * @memberof SignTypedDataForEndUserRequest
     */
    'walletId': string;
    /**
     * A string represents the typed structured data in EIP-712
     * @type {string}
     * @memberof SignTypedDataForEndUserRequest
     */
    'data': string;
    /**
     * The human readable explanation for this sign action. Useful for presenting with extra information.
     * @type {string}
     * @memberof SignTypedDataForEndUserRequest
     */
    'memo'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SignTypedDataForEndUserResponse
 */
interface SignTypedDataForEndUserResponse {
    /**
     * Unique system generated identifier used to initiate a user challenge flow.
     * @type {string}
     * @memberof SignTypedDataForEndUserResponse
     */
    'challengeId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface SignUserMessage200Response
 */
interface SignUserMessage200Response {
    /**
     *
     * @type {SignMessageForEndUserResponse}
     * @memberof SignUserMessage200Response
     */
    'data'?: SignMessageForEndUserResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface SignUserTypedData200Response
 */
interface SignUserTypedData200Response {
    /**
     *
     * @type {SignTypedDataForEndUserResponse}
     * @memberof SignUserTypedData200Response
     */
    'data'?: SignTypedDataForEndUserResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface UpdateUserPinChallenge200Response
 */
interface UpdateUserPinChallenge200Response {
    /**
     *
     * @type {ChangePinResponse}
     * @memberof UpdateUserPinChallenge200Response
     */
    'data'?: ChangePinResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface UpdateWallet200Response
 */
interface UpdateWallet200Response {
    /**
     *
     * @type {ExtWalletResponse}
     * @memberof UpdateWallet200Response
     */
    'data'?: ExtWalletResponse;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ValidateAddressRequest
 */
interface ValidateAddressRequest {
    /**
     * The blockchain address generated upon wallet creation.
     * @type {string}
     * @memberof ValidateAddressRequest
     */
    'address': string;
    /**
     *
     * @type {Blockchain}
     * @memberof ValidateAddressRequest
     */
    'blockchain': Blockchain;
}

/**
 * SigningApi - axios parameter creator
 * @export
 */
declare const SigningApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Generates a challenge for signing the EIP-191 message from a specified user-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign message
     * @param {string} xUserToken User token
     * @param {SignMessageForEndUserRequest} signMessageForEndUserRequest Sign message for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUserMessage: (xUserToken: string, signMessageForEndUserRequest: SignMessageForEndUserRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generates a challenge for signing the EIP-712 typed structured data from a specified user-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign typed data
     * @param {string} xUserToken User token
     * @param {SignTypedDataForEndUserRequest} signTypedDataForEndUserRequest Sign typed data for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUserTypedData: (xUserToken: string, signTypedDataForEndUserRequest: SignTypedDataForEndUserRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SigningApi - functional programming interface
 * @export
 */
declare const SigningApiFp: (configuration?: Configuration) => {
    /**
     * Generates a challenge for signing the EIP-191 message from a specified user-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign message
     * @param {string} xUserToken User token
     * @param {SignMessageForEndUserRequest} signMessageForEndUserRequest Sign message for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUserMessage(xUserToken: string, signMessageForEndUserRequest: SignMessageForEndUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignUserMessage200Response>>;
    /**
     * Generates a challenge for signing the EIP-712 typed structured data from a specified user-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign typed data
     * @param {string} xUserToken User token
     * @param {SignTypedDataForEndUserRequest} signTypedDataForEndUserRequest Sign typed data for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUserTypedData(xUserToken: string, signTypedDataForEndUserRequest: SignTypedDataForEndUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignUserTypedData200Response>>;
};
/**
 * SigningApi - factory interface
 * @export
 */
declare const SigningApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Generates a challenge for signing the EIP-191 message from a specified user-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign message
     * @param {string} xUserToken User token
     * @param {SignMessageForEndUserRequest} signMessageForEndUserRequest Sign message for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUserMessage(xUserToken: string, signMessageForEndUserRequest: SignMessageForEndUserRequest, options?: any): AxiosPromise<SignUserMessage200Response>;
    /**
     * Generates a challenge for signing the EIP-712 typed structured data from a specified user-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign typed data
     * @param {string} xUserToken User token
     * @param {SignTypedDataForEndUserRequest} signTypedDataForEndUserRequest Sign typed data for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUserTypedData(xUserToken: string, signTypedDataForEndUserRequest: SignTypedDataForEndUserRequest, options?: any): AxiosPromise<SignUserTypedData200Response>;
};
/**
 * SigningApi - object-oriented interface
 * @export
 * @class SigningApi
 * @extends {BaseAPI}
 */
declare class SigningApi extends BaseAPI {
    /**
     * Generates a challenge for signing the EIP-191 message from a specified user-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign message
     * @param {string} xUserToken User token
     * @param {SignMessageForEndUserRequest} signMessageForEndUserRequest Sign message for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigningApi
     */
    signUserMessage(xUserToken: string, signMessageForEndUserRequest: SignMessageForEndUserRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<SignUserMessage200Response, any>>;
    /**
     * Generates a challenge for signing the EIP-712 typed structured data from a specified user-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign typed data
     * @param {string} xUserToken User token
     * @param {SignTypedDataForEndUserRequest} signTypedDataForEndUserRequest Sign typed data for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigningApi
     */
    signUserTypedData(xUserToken: string, signTypedDataForEndUserRequest: SignTypedDataForEndUserRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<SignUserTypedData200Response, any>>;
}

/**
 * TokenLookupApi - axios parameter creator
 * @export
 */
declare const TokenLookupApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetches details of a specific token given its unique identifier. Every token in your network of wallets has a UUID associated with it, regardless of whether it\'s already recognized or was added as a monitored token.
     * @summary Get token details
     * @param {string} id Token ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenId: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TokenLookupApi - functional programming interface
 * @export
 */
declare const TokenLookupApiFp: (configuration?: Configuration) => {
    /**
     * Fetches details of a specific token given its unique identifier. Every token in your network of wallets has a UUID associated with it, regardless of whether it\'s already recognized or was added as a monitored token.
     * @summary Get token details
     * @param {string} id Token ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTokenId200Response>>;
};
/**
 * TokenLookupApi - factory interface
 * @export
 */
declare const TokenLookupApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetches details of a specific token given its unique identifier. Every token in your network of wallets has a UUID associated with it, regardless of whether it\'s already recognized or was added as a monitored token.
     * @summary Get token details
     * @param {string} id Token ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenId(id: string, options?: any): AxiosPromise<GetTokenId200Response>;
};
/**
 * TokenLookupApi - object-oriented interface
 * @export
 * @class TokenLookupApi
 * @extends {BaseAPI}
 */
declare class TokenLookupApi extends BaseAPI {
    /**
     * Fetches details of a specific token given its unique identifier. Every token in your network of wallets has a UUID associated with it, regardless of whether it\'s already recognized or was added as a monitored token.
     * @summary Get token details
     * @param {string} id Token ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenLookupApi
     */
    getTokenId(id: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<GetTokenId200Response, any>>;
}

/**
 * TransactionsApi - axios parameter creator
 * @export
 */
declare const TransactionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Estimates gas fees that will be incurred for a contract execution transaction, given its ABI parameters and blockchain.
     * @summary Estimate fee for a contract execution transaction
     * @param {EstimateContractExecutionTransactionFeeRequest} estimateContractExecutionTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionEstimateFee: (estimateContractExecutionTransactionFeeRequest: EstimateContractExecutionTransactionFeeRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Estimates gas fees that will be incurred for a transfer transaction; given its amount, blockchain, and token.
     * @summary Estimate fee for a transfer transaction
     * @param {EstimateTransferTransactionFeeRequest} estimateTransferTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransferEstimateFee: (estimateTransferTransactionFeeRequest: EstimateTransferTransactionFeeRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generates a challenge for accelerating a specified on-chain digital asset transfer from a user-controlled wallet. Additional gas fees may be incurred.
     * @summary Create a Challenge to accelerate a transaction
     * @param {string} xUserToken User token
     * @param {string} id Transaction ID
     * @param {AccelerateTransactionForEndUserRequest} accelerateTransactionForEndUserRequest Accelerate transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionAccelerateChallenge: (xUserToken: string, id: string, accelerateTransactionForEndUserRequest: AccelerateTransactionForEndUserRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generates a challenge for cancelling a specified on-chain digital asset transfer from a user-controlled wallet. Gas fees may still be incurred.
     * @summary Create a challenge to cancel a transaction
     * @param {string} xUserToken User token
     * @param {string} id Transaction ID
     * @param {CancelTransactionForEndUserRequest} cancelTransactionForEndUserRequest Cancel transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionCancelChallenge: (xUserToken: string, id: string, cancelTransactionForEndUserRequest: CancelTransactionForEndUserRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generates a challenge for creating a transaction which executes a smart contract. ABI parameters must be passed in the request.
     * @summary Create a challenge for contract execution
     * @param {string} xUserToken User token
     * @param {ContractExecutionTxnPinCodeRequest} contractExecutionTxnPinCodeRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionContractExecutionChallenge: (xUserToken: string, contractExecutionTxnPinCodeRequest: ContractExecutionTxnPinCodeRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generates a challenge for initiating an on-chain digital asset transfer from a specified user-controlled wallet
     * @summary Create a challenge for a transfer
     * @param {string} xUserToken User token
     * @param {CreateTransferTransactionForEndUserRequest} createTransferTransactionForEndUserRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionTransferChallenge: (xUserToken: string, createTransferTransactionForEndUserRequest: CreateTransferTransactionForEndUserRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Confirms that a specified address is valid for a given token on a certain blockchain.
     * @summary Validate an address
     * @param {ValidateAddressRequest} validateAddressRequest Validate address request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createValidateAddress: (validateAddressRequest: ValidateAddressRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves info for a single transaction using it\'s unique identifier.
     * @summary Get a transaction
     * @param {string} id Transaction id
     * @param {string} [xUserToken] User token
     * @param {GetTransactionTxTypeEnum} [txType] TxType filters on the TxType of the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction: (id: string, xUserToken?: string, txType?: GetTransactionTxTypeEnum, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all transactions. Includes details such as status, source/destination, and transaction hash.
     * @summary List transactions
     * @param {string} [xUserToken] User token
     * @param {ListTransactionsBlockchainEnum} [blockchain] Blockchain filters on the blockchain of the transaction
     * @param {ListTransactionsCustodyTypeEnum} [custodyType] CustodyType filters on the CustodyType of the transaction
     * @param {string} [destinationAddress] DestinationAddress filters on the DestinationAddress of the transaction
     * @param {boolean} [includeAll]
     * @param {ListTransactionsOperationEnum} [operation] Operation filters on the Operation of the transaction
     * @param {ListTransactionsStateEnum} [state] State filters on the state of the transaction
     * @param {string} [txHash] TxHash filters on the TxHash of the transaction
     * @param {ListTransactionsTxTypeEnum} [txType] TxType filters on the TxType of the transaction
     * @param {string} [userId] ExtUserID filters on the userID of the transaction
     * @param {string} [walletIds] WalletIDs filters on the wallet ids of the transaction
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions: (xUserToken?: string, blockchain?: ListTransactionsBlockchainEnum, custodyType?: ListTransactionsCustodyTypeEnum, destinationAddress?: string, includeAll?: boolean, operation?: ListTransactionsOperationEnum, state?: ListTransactionsStateEnum, txHash?: string, txType?: ListTransactionsTxTypeEnum, userId?: string, walletIds?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
declare const TransactionsApiFp: (configuration?: Configuration) => {
    /**
     * Estimates gas fees that will be incurred for a contract execution transaction, given its ABI parameters and blockchain.
     * @summary Estimate fee for a contract execution transaction
     * @param {EstimateContractExecutionTransactionFeeRequest} estimateContractExecutionTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionEstimateFee(estimateContractExecutionTransactionFeeRequest: EstimateContractExecutionTransactionFeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTransferEstimateFee200Response>>;
    /**
     * Estimates gas fees that will be incurred for a transfer transaction; given its amount, blockchain, and token.
     * @summary Estimate fee for a transfer transaction
     * @param {EstimateTransferTransactionFeeRequest} estimateTransferTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransferEstimateFee(estimateTransferTransactionFeeRequest: EstimateTransferTransactionFeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTransferEstimateFee200Response>>;
    /**
     * Generates a challenge for accelerating a specified on-chain digital asset transfer from a user-controlled wallet. Additional gas fees may be incurred.
     * @summary Create a Challenge to accelerate a transaction
     * @param {string} xUserToken User token
     * @param {string} id Transaction ID
     * @param {AccelerateTransactionForEndUserRequest} accelerateTransactionForEndUserRequest Accelerate transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionAccelerateChallenge(xUserToken: string, id: string, accelerateTransactionForEndUserRequest: AccelerateTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserTransactionAccelerateChallenge200Response>>;
    /**
     * Generates a challenge for cancelling a specified on-chain digital asset transfer from a user-controlled wallet. Gas fees may still be incurred.
     * @summary Create a challenge to cancel a transaction
     * @param {string} xUserToken User token
     * @param {string} id Transaction ID
     * @param {CancelTransactionForEndUserRequest} cancelTransactionForEndUserRequest Cancel transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionCancelChallenge(xUserToken: string, id: string, cancelTransactionForEndUserRequest: CancelTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserTransactionCancelChallenge200Response>>;
    /**
     * Generates a challenge for creating a transaction which executes a smart contract. ABI parameters must be passed in the request.
     * @summary Create a challenge for contract execution
     * @param {string} xUserToken User token
     * @param {ContractExecutionTxnPinCodeRequest} contractExecutionTxnPinCodeRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionContractExecutionChallenge(xUserToken: string, contractExecutionTxnPinCodeRequest: ContractExecutionTxnPinCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserTransactionContractExecutionChallenge200Response>>;
    /**
     * Generates a challenge for initiating an on-chain digital asset transfer from a specified user-controlled wallet
     * @summary Create a challenge for a transfer
     * @param {string} xUserToken User token
     * @param {CreateTransferTransactionForEndUserRequest} createTransferTransactionForEndUserRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionTransferChallenge(xUserToken: string, createTransferTransactionForEndUserRequest: CreateTransferTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserTransactionTransferChallenge200Response>>;
    /**
     * Confirms that a specified address is valid for a given token on a certain blockchain.
     * @summary Validate an address
     * @param {ValidateAddressRequest} validateAddressRequest Validate address request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createValidateAddress(validateAddressRequest: ValidateAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateValidateAddress200Response>>;
    /**
     * Retrieves info for a single transaction using it\'s unique identifier.
     * @summary Get a transaction
     * @param {string} id Transaction id
     * @param {string} [xUserToken] User token
     * @param {GetTransactionTxTypeEnum} [txType] TxType filters on the TxType of the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction(id: string, xUserToken?: string, txType?: GetTransactionTxTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTransaction200Response>>;
    /**
     * Lists all transactions. Includes details such as status, source/destination, and transaction hash.
     * @summary List transactions
     * @param {string} [xUserToken] User token
     * @param {ListTransactionsBlockchainEnum} [blockchain] Blockchain filters on the blockchain of the transaction
     * @param {ListTransactionsCustodyTypeEnum} [custodyType] CustodyType filters on the CustodyType of the transaction
     * @param {string} [destinationAddress] DestinationAddress filters on the DestinationAddress of the transaction
     * @param {boolean} [includeAll]
     * @param {ListTransactionsOperationEnum} [operation] Operation filters on the Operation of the transaction
     * @param {ListTransactionsStateEnum} [state] State filters on the state of the transaction
     * @param {string} [txHash] TxHash filters on the TxHash of the transaction
     * @param {ListTransactionsTxTypeEnum} [txType] TxType filters on the TxType of the transaction
     * @param {string} [userId] ExtUserID filters on the userID of the transaction
     * @param {string} [walletIds] WalletIDs filters on the wallet ids of the transaction
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions(xUserToken?: string, blockchain?: ListTransactionsBlockchainEnum, custodyType?: ListTransactionsCustodyTypeEnum, destinationAddress?: string, includeAll?: boolean, operation?: ListTransactionsOperationEnum, state?: ListTransactionsStateEnum, txHash?: string, txType?: ListTransactionsTxTypeEnum, userId?: string, walletIds?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTransactions200Response>>;
};
/**
 * TransactionsApi - factory interface
 * @export
 */
declare const TransactionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Estimates gas fees that will be incurred for a contract execution transaction, given its ABI parameters and blockchain.
     * @summary Estimate fee for a contract execution transaction
     * @param {EstimateContractExecutionTransactionFeeRequest} estimateContractExecutionTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionEstimateFee(estimateContractExecutionTransactionFeeRequest: EstimateContractExecutionTransactionFeeRequest, options?: any): AxiosPromise<CreateTransferEstimateFee200Response>;
    /**
     * Estimates gas fees that will be incurred for a transfer transaction; given its amount, blockchain, and token.
     * @summary Estimate fee for a transfer transaction
     * @param {EstimateTransferTransactionFeeRequest} estimateTransferTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransferEstimateFee(estimateTransferTransactionFeeRequest: EstimateTransferTransactionFeeRequest, options?: any): AxiosPromise<CreateTransferEstimateFee200Response>;
    /**
     * Generates a challenge for accelerating a specified on-chain digital asset transfer from a user-controlled wallet. Additional gas fees may be incurred.
     * @summary Create a Challenge to accelerate a transaction
     * @param {string} xUserToken User token
     * @param {string} id Transaction ID
     * @param {AccelerateTransactionForEndUserRequest} accelerateTransactionForEndUserRequest Accelerate transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionAccelerateChallenge(xUserToken: string, id: string, accelerateTransactionForEndUserRequest: AccelerateTransactionForEndUserRequest, options?: any): AxiosPromise<CreateUserTransactionAccelerateChallenge200Response>;
    /**
     * Generates a challenge for cancelling a specified on-chain digital asset transfer from a user-controlled wallet. Gas fees may still be incurred.
     * @summary Create a challenge to cancel a transaction
     * @param {string} xUserToken User token
     * @param {string} id Transaction ID
     * @param {CancelTransactionForEndUserRequest} cancelTransactionForEndUserRequest Cancel transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionCancelChallenge(xUserToken: string, id: string, cancelTransactionForEndUserRequest: CancelTransactionForEndUserRequest, options?: any): AxiosPromise<CreateUserTransactionCancelChallenge200Response>;
    /**
     * Generates a challenge for creating a transaction which executes a smart contract. ABI parameters must be passed in the request.
     * @summary Create a challenge for contract execution
     * @param {string} xUserToken User token
     * @param {ContractExecutionTxnPinCodeRequest} contractExecutionTxnPinCodeRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionContractExecutionChallenge(xUserToken: string, contractExecutionTxnPinCodeRequest: ContractExecutionTxnPinCodeRequest, options?: any): AxiosPromise<CreateUserTransactionContractExecutionChallenge200Response>;
    /**
     * Generates a challenge for initiating an on-chain digital asset transfer from a specified user-controlled wallet
     * @summary Create a challenge for a transfer
     * @param {string} xUserToken User token
     * @param {CreateTransferTransactionForEndUserRequest} createTransferTransactionForEndUserRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionTransferChallenge(xUserToken: string, createTransferTransactionForEndUserRequest: CreateTransferTransactionForEndUserRequest, options?: any): AxiosPromise<CreateUserTransactionTransferChallenge200Response>;
    /**
     * Confirms that a specified address is valid for a given token on a certain blockchain.
     * @summary Validate an address
     * @param {ValidateAddressRequest} validateAddressRequest Validate address request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createValidateAddress(validateAddressRequest: ValidateAddressRequest, options?: any): AxiosPromise<CreateValidateAddress200Response>;
    /**
     * Retrieves info for a single transaction using it\'s unique identifier.
     * @summary Get a transaction
     * @param {string} id Transaction id
     * @param {string} [xUserToken] User token
     * @param {GetTransactionTxTypeEnum} [txType] TxType filters on the TxType of the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction(id: string, xUserToken?: string, txType?: GetTransactionTxTypeEnum, options?: any): AxiosPromise<GetTransaction200Response>;
    /**
     * Lists all transactions. Includes details such as status, source/destination, and transaction hash.
     * @summary List transactions
     * @param {string} [xUserToken] User token
     * @param {ListTransactionsBlockchainEnum} [blockchain] Blockchain filters on the blockchain of the transaction
     * @param {ListTransactionsCustodyTypeEnum} [custodyType] CustodyType filters on the CustodyType of the transaction
     * @param {string} [destinationAddress] DestinationAddress filters on the DestinationAddress of the transaction
     * @param {boolean} [includeAll]
     * @param {ListTransactionsOperationEnum} [operation] Operation filters on the Operation of the transaction
     * @param {ListTransactionsStateEnum} [state] State filters on the state of the transaction
     * @param {string} [txHash] TxHash filters on the TxHash of the transaction
     * @param {ListTransactionsTxTypeEnum} [txType] TxType filters on the TxType of the transaction
     * @param {string} [userId] ExtUserID filters on the userID of the transaction
     * @param {string} [walletIds] WalletIDs filters on the wallet ids of the transaction
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions(xUserToken?: string, blockchain?: ListTransactionsBlockchainEnum, custodyType?: ListTransactionsCustodyTypeEnum, destinationAddress?: string, includeAll?: boolean, operation?: ListTransactionsOperationEnum, state?: ListTransactionsStateEnum, txHash?: string, txType?: ListTransactionsTxTypeEnum, userId?: string, walletIds?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<ListTransactions200Response>;
};
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
declare class TransactionsApi extends BaseAPI {
    /**
     * Estimates gas fees that will be incurred for a contract execution transaction, given its ABI parameters and blockchain.
     * @summary Estimate fee for a contract execution transaction
     * @param {EstimateContractExecutionTransactionFeeRequest} estimateContractExecutionTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createTransactionEstimateFee(estimateContractExecutionTransactionFeeRequest: EstimateContractExecutionTransactionFeeRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateTransferEstimateFee200Response, any>>;
    /**
     * Estimates gas fees that will be incurred for a transfer transaction; given its amount, blockchain, and token.
     * @summary Estimate fee for a transfer transaction
     * @param {EstimateTransferTransactionFeeRequest} estimateTransferTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createTransferEstimateFee(estimateTransferTransactionFeeRequest: EstimateTransferTransactionFeeRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateTransferEstimateFee200Response, any>>;
    /**
     * Generates a challenge for accelerating a specified on-chain digital asset transfer from a user-controlled wallet. Additional gas fees may be incurred.
     * @summary Create a Challenge to accelerate a transaction
     * @param {string} xUserToken User token
     * @param {string} id Transaction ID
     * @param {AccelerateTransactionForEndUserRequest} accelerateTransactionForEndUserRequest Accelerate transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createUserTransactionAccelerateChallenge(xUserToken: string, id: string, accelerateTransactionForEndUserRequest: AccelerateTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateUserTransactionAccelerateChallenge200Response, any>>;
    /**
     * Generates a challenge for cancelling a specified on-chain digital asset transfer from a user-controlled wallet. Gas fees may still be incurred.
     * @summary Create a challenge to cancel a transaction
     * @param {string} xUserToken User token
     * @param {string} id Transaction ID
     * @param {CancelTransactionForEndUserRequest} cancelTransactionForEndUserRequest Cancel transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createUserTransactionCancelChallenge(xUserToken: string, id: string, cancelTransactionForEndUserRequest: CancelTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateUserTransactionCancelChallenge200Response, any>>;
    /**
     * Generates a challenge for creating a transaction which executes a smart contract. ABI parameters must be passed in the request.
     * @summary Create a challenge for contract execution
     * @param {string} xUserToken User token
     * @param {ContractExecutionTxnPinCodeRequest} contractExecutionTxnPinCodeRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createUserTransactionContractExecutionChallenge(xUserToken: string, contractExecutionTxnPinCodeRequest: ContractExecutionTxnPinCodeRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateUserTransactionContractExecutionChallenge200Response, any>>;
    /**
     * Generates a challenge for initiating an on-chain digital asset transfer from a specified user-controlled wallet
     * @summary Create a challenge for a transfer
     * @param {string} xUserToken User token
     * @param {CreateTransferTransactionForEndUserRequest} createTransferTransactionForEndUserRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createUserTransactionTransferChallenge(xUserToken: string, createTransferTransactionForEndUserRequest: CreateTransferTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateUserTransactionTransferChallenge200Response, any>>;
    /**
     * Confirms that a specified address is valid for a given token on a certain blockchain.
     * @summary Validate an address
     * @param {ValidateAddressRequest} validateAddressRequest Validate address request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createValidateAddress(validateAddressRequest: ValidateAddressRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateValidateAddress200Response, any>>;
    /**
     * Retrieves info for a single transaction using it\'s unique identifier.
     * @summary Get a transaction
     * @param {string} id Transaction id
     * @param {string} [xUserToken] User token
     * @param {GetTransactionTxTypeEnum} [txType] TxType filters on the TxType of the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransaction(id: string, xUserToken?: string, txType?: GetTransactionTxTypeEnum, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<GetTransaction200Response, any>>;
    /**
     * Lists all transactions. Includes details such as status, source/destination, and transaction hash.
     * @summary List transactions
     * @param {string} [xUserToken] User token
     * @param {ListTransactionsBlockchainEnum} [blockchain] Blockchain filters on the blockchain of the transaction
     * @param {ListTransactionsCustodyTypeEnum} [custodyType] CustodyType filters on the CustodyType of the transaction
     * @param {string} [destinationAddress] DestinationAddress filters on the DestinationAddress of the transaction
     * @param {boolean} [includeAll]
     * @param {ListTransactionsOperationEnum} [operation] Operation filters on the Operation of the transaction
     * @param {ListTransactionsStateEnum} [state] State filters on the state of the transaction
     * @param {string} [txHash] TxHash filters on the TxHash of the transaction
     * @param {ListTransactionsTxTypeEnum} [txType] TxType filters on the TxType of the transaction
     * @param {string} [userId] ExtUserID filters on the userID of the transaction
     * @param {string} [walletIds] WalletIDs filters on the wallet ids of the transaction
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    listTransactions(xUserToken?: string, blockchain?: ListTransactionsBlockchainEnum, custodyType?: ListTransactionsCustodyTypeEnum, destinationAddress?: string, includeAll?: boolean, operation?: ListTransactionsOperationEnum, state?: ListTransactionsStateEnum, txHash?: string, txType?: ListTransactionsTxTypeEnum, userId?: string, walletIds?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<ListTransactions200Response, any>>;
}
/**
 * @export
 */
declare const GetTransactionTxTypeEnum: {
    readonly Inbound: "INBOUND";
    readonly Outbound: "OUTBOUND";
};
type GetTransactionTxTypeEnum = typeof GetTransactionTxTypeEnum[keyof typeof GetTransactionTxTypeEnum];
/**
 * @export
 */
declare const ListTransactionsBlockchainEnum: {
    readonly Eth: "ETH";
    readonly EthGoerli: "ETH-GOERLI";
    readonly Avax: "AVAX";
    readonly AvaxFuji: "AVAX-FUJI";
    readonly Matic: "MATIC";
    readonly MaticMumbai: "MATIC-MUMBAI";
};
type ListTransactionsBlockchainEnum = typeof ListTransactionsBlockchainEnum[keyof typeof ListTransactionsBlockchainEnum];
/**
 * @export
 */
declare const ListTransactionsCustodyTypeEnum: {
    readonly Developer: "DEVELOPER";
    readonly Enduser: "ENDUSER";
};
type ListTransactionsCustodyTypeEnum = typeof ListTransactionsCustodyTypeEnum[keyof typeof ListTransactionsCustodyTypeEnum];
/**
 * @export
 */
declare const ListTransactionsOperationEnum: {
    readonly Transfer: "TRANSFER";
    readonly ContractExecution: "CONTRACT_EXECUTION";
    readonly ContractDeployment: "CONTRACT_DEPLOYMENT";
};
type ListTransactionsOperationEnum = typeof ListTransactionsOperationEnum[keyof typeof ListTransactionsOperationEnum];
/**
 * @export
 */
declare const ListTransactionsStateEnum: {
    readonly Initiated: "INITIATED";
    readonly PendingRiskScreening: "PENDING_RISK_SCREENING";
    readonly Denied: "DENIED";
    readonly Queued: "QUEUED";
    readonly Sent: "SENT";
    readonly Confirmed: "CONFIRMED";
    readonly Completed: "COMPLETED";
    readonly Cancelled: "CANCELLED";
    readonly Failed: "FAILED";
};
type ListTransactionsStateEnum = typeof ListTransactionsStateEnum[keyof typeof ListTransactionsStateEnum];
/**
 * @export
 */
declare const ListTransactionsTxTypeEnum: {
    readonly Inbound: "INBOUND";
    readonly Outbound: "OUTBOUND";
};
type ListTransactionsTxTypeEnum = typeof ListTransactionsTxTypeEnum[keyof typeof ListTransactionsTxTypeEnum];

/**
 * UsersAndPinsApi - axios parameter creator
 * @export
 */
declare const UsersAndPinsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a user.
     * @summary Create a user
     * @param {CreateUserRequest} createUserRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (createUserRequest: CreateUserRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a challenge for PIN setup without setting up wallets.
     * @summary Create a challenge for PIN setup
     * @param {string} xUserToken User token
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserPinChallenge: (xUserToken: string, setPinRequest: SetPinRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a challenge to change a user\'s PIN via Security Questions.
     * @summary Create a challenge for PIN restore
     * @param {string} xUserToken User token
     * @param {RestorePinRequest} restorePinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserPinRestoreChallenge: (xUserToken: string, restorePinRequest: RestorePinRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a challenge for PIN setup and create wallet(s)
     * @summary Create a challenge for PIN setup and create wallet(s)
     * @param {string} xUserToken User token
     * @param {SetPinAndInitWalletRequest} setPinAndInitWalletRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWithPinChallenge: (xUserToken: string, setPinAndInitWalletRequest: SetPinAndInitWalletRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get user by ID.
     * @summary Get a user
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get user\'s PIN and Security Question statuses.
     * @summary Get user status
     * @param {string} xUserToken User token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByToken: (xUserToken: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the status of a challenge.
     * @summary Get a challenge
     * @param {string} xUserToken User token
     * @param {string} id ExtChallenge id to query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserChallenge: (xUserToken: string, id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generate user session and SDK secret key.
     * @summary Create a user token
     * @param {GenerateUserTokenRequest} generateUserTokenRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserToken: (generateUserTokenRequest: GenerateUserTokenRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all challenges by status for a user.
     * @summary List challenges
     * @param {string} xUserToken User token
     * @param {ListUserChallengesStatusEnum} [status] ExtChallenge status to query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserChallenges: (xUserToken: string, status?: ListUserChallengesStatusEnum, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all the users under the entity, sorted by the create date DESC order.
     * @summary List users
     * @param {ListUsersPinStatusEnum} [pinStatus] PinStatus
     * @param {ListUsersSecurityQuestionStatusEnum} [securityQuestionStatus] SecurityQuestionStatus
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: (pinStatus?: ListUsersPinStatusEnum, securityQuestionStatus?: ListUsersSecurityQuestionStatusEnum, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a challenge to update a user\'s PIN via existing PIN.
     * @summary Create a challenge to update PIN
     * @param {string} xUserToken User token
     * @param {ChangePinRequest} changePinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserPinChallenge: (xUserToken: string, changePinRequest: ChangePinRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersAndPinsApi - functional programming interface
 * @export
 */
declare const UsersAndPinsApiFp: (configuration?: Configuration) => {
    /**
     * Create a user.
     * @summary Create a user
     * @param {CreateUserRequest} createUserRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(createUserRequest: CreateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Create a challenge for PIN setup without setting up wallets.
     * @summary Create a challenge for PIN setup
     * @param {string} xUserToken User token
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserPinChallenge(xUserToken: string, setPinRequest: SetPinRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserWithPinChallenge200Response>>;
    /**
     * Create a challenge to change a user\'s PIN via Security Questions.
     * @summary Create a challenge for PIN restore
     * @param {string} xUserToken User token
     * @param {RestorePinRequest} restorePinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserPinRestoreChallenge(xUserToken: string, restorePinRequest: RestorePinRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserPinRestoreChallenge200Response>>;
    /**
     * Create a challenge for PIN setup and create wallet(s)
     * @summary Create a challenge for PIN setup and create wallet(s)
     * @param {string} xUserToken User token
     * @param {SetPinAndInitWalletRequest} setPinAndInitWalletRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWithPinChallenge(xUserToken: string, setPinAndInitWalletRequest: SetPinAndInitWalletRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserWithPinChallenge200Response>>;
    /**
     * Get user by ID.
     * @summary Get a user
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUser200Response>>;
    /**
     * Get user\'s PIN and Security Question statuses.
     * @summary Get user status
     * @param {string} xUserToken User token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByToken(xUserToken: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserByToken200Response>>;
    /**
     * Get the status of a challenge.
     * @summary Get a challenge
     * @param {string} xUserToken User token
     * @param {string} id ExtChallenge id to query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserChallenge(xUserToken: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserChallenge200Response>>;
    /**
     * Generate user session and SDK secret key.
     * @summary Create a user token
     * @param {GenerateUserTokenRequest} generateUserTokenRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserToken(generateUserTokenRequest: GenerateUserTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserToken200Response>>;
    /**
     * List all challenges by status for a user.
     * @summary List challenges
     * @param {string} xUserToken User token
     * @param {ListUserChallengesStatusEnum} [status] ExtChallenge status to query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserChallenges(xUserToken: string, status?: ListUserChallengesStatusEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUserChallenges200Response>>;
    /**
     * Get all the users under the entity, sorted by the create date DESC order.
     * @summary List users
     * @param {ListUsersPinStatusEnum} [pinStatus] PinStatus
     * @param {ListUsersSecurityQuestionStatusEnum} [securityQuestionStatus] SecurityQuestionStatus
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(pinStatus?: ListUsersPinStatusEnum, securityQuestionStatus?: ListUsersSecurityQuestionStatusEnum, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsers200Response>>;
    /**
     * Create a challenge to update a user\'s PIN via existing PIN.
     * @summary Create a challenge to update PIN
     * @param {string} xUserToken User token
     * @param {ChangePinRequest} changePinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserPinChallenge(xUserToken: string, changePinRequest: ChangePinRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserPinChallenge200Response>>;
};
/**
 * UsersAndPinsApi - factory interface
 * @export
 */
declare const UsersAndPinsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a user.
     * @summary Create a user
     * @param {CreateUserRequest} createUserRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(createUserRequest: CreateUserRequest, options?: any): AxiosPromise<object>;
    /**
     * Create a challenge for PIN setup without setting up wallets.
     * @summary Create a challenge for PIN setup
     * @param {string} xUserToken User token
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserPinChallenge(xUserToken: string, setPinRequest: SetPinRequest, options?: any): AxiosPromise<CreateUserWithPinChallenge200Response>;
    /**
     * Create a challenge to change a user\'s PIN via Security Questions.
     * @summary Create a challenge for PIN restore
     * @param {string} xUserToken User token
     * @param {RestorePinRequest} restorePinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserPinRestoreChallenge(xUserToken: string, restorePinRequest: RestorePinRequest, options?: any): AxiosPromise<CreateUserPinRestoreChallenge200Response>;
    /**
     * Create a challenge for PIN setup and create wallet(s)
     * @summary Create a challenge for PIN setup and create wallet(s)
     * @param {string} xUserToken User token
     * @param {SetPinAndInitWalletRequest} setPinAndInitWalletRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWithPinChallenge(xUserToken: string, setPinAndInitWalletRequest: SetPinAndInitWalletRequest, options?: any): AxiosPromise<CreateUserWithPinChallenge200Response>;
    /**
     * Get user by ID.
     * @summary Get a user
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id: string, options?: any): AxiosPromise<GetUser200Response>;
    /**
     * Get user\'s PIN and Security Question statuses.
     * @summary Get user status
     * @param {string} xUserToken User token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByToken(xUserToken: string, options?: any): AxiosPromise<GetUserByToken200Response>;
    /**
     * Get the status of a challenge.
     * @summary Get a challenge
     * @param {string} xUserToken User token
     * @param {string} id ExtChallenge id to query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserChallenge(xUserToken: string, id: string, options?: any): AxiosPromise<GetUserChallenge200Response>;
    /**
     * Generate user session and SDK secret key.
     * @summary Create a user token
     * @param {GenerateUserTokenRequest} generateUserTokenRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserToken(generateUserTokenRequest: GenerateUserTokenRequest, options?: any): AxiosPromise<GetUserToken200Response>;
    /**
     * List all challenges by status for a user.
     * @summary List challenges
     * @param {string} xUserToken User token
     * @param {ListUserChallengesStatusEnum} [status] ExtChallenge status to query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserChallenges(xUserToken: string, status?: ListUserChallengesStatusEnum, options?: any): AxiosPromise<ListUserChallenges200Response>;
    /**
     * Get all the users under the entity, sorted by the create date DESC order.
     * @summary List users
     * @param {ListUsersPinStatusEnum} [pinStatus] PinStatus
     * @param {ListUsersSecurityQuestionStatusEnum} [securityQuestionStatus] SecurityQuestionStatus
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(pinStatus?: ListUsersPinStatusEnum, securityQuestionStatus?: ListUsersSecurityQuestionStatusEnum, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<ListUsers200Response>;
    /**
     * Create a challenge to update a user\'s PIN via existing PIN.
     * @summary Create a challenge to update PIN
     * @param {string} xUserToken User token
     * @param {ChangePinRequest} changePinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserPinChallenge(xUserToken: string, changePinRequest: ChangePinRequest, options?: any): AxiosPromise<UpdateUserPinChallenge200Response>;
};
/**
 * UsersAndPinsApi - object-oriented interface
 * @export
 * @class UsersAndPinsApi
 * @extends {BaseAPI}
 */
declare class UsersAndPinsApi extends BaseAPI {
    /**
     * Create a user.
     * @summary Create a user
     * @param {CreateUserRequest} createUserRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAndPinsApi
     */
    createUser(createUserRequest: CreateUserRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<object, any>>;
    /**
     * Create a challenge for PIN setup without setting up wallets.
     * @summary Create a challenge for PIN setup
     * @param {string} xUserToken User token
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAndPinsApi
     */
    createUserPinChallenge(xUserToken: string, setPinRequest: SetPinRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateUserWithPinChallenge200Response, any>>;
    /**
     * Create a challenge to change a user\'s PIN via Security Questions.
     * @summary Create a challenge for PIN restore
     * @param {string} xUserToken User token
     * @param {RestorePinRequest} restorePinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAndPinsApi
     */
    createUserPinRestoreChallenge(xUserToken: string, restorePinRequest: RestorePinRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateUserPinRestoreChallenge200Response, any>>;
    /**
     * Create a challenge for PIN setup and create wallet(s)
     * @summary Create a challenge for PIN setup and create wallet(s)
     * @param {string} xUserToken User token
     * @param {SetPinAndInitWalletRequest} setPinAndInitWalletRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAndPinsApi
     */
    createUserWithPinChallenge(xUserToken: string, setPinAndInitWalletRequest: SetPinAndInitWalletRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateUserWithPinChallenge200Response, any>>;
    /**
     * Get user by ID.
     * @summary Get a user
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAndPinsApi
     */
    getUser(id: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<GetUser200Response, any>>;
    /**
     * Get user\'s PIN and Security Question statuses.
     * @summary Get user status
     * @param {string} xUserToken User token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAndPinsApi
     */
    getUserByToken(xUserToken: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<GetUserByToken200Response, any>>;
    /**
     * Get the status of a challenge.
     * @summary Get a challenge
     * @param {string} xUserToken User token
     * @param {string} id ExtChallenge id to query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAndPinsApi
     */
    getUserChallenge(xUserToken: string, id: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<GetUserChallenge200Response, any>>;
    /**
     * Generate user session and SDK secret key.
     * @summary Create a user token
     * @param {GenerateUserTokenRequest} generateUserTokenRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAndPinsApi
     */
    getUserToken(generateUserTokenRequest: GenerateUserTokenRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<GetUserToken200Response, any>>;
    /**
     * List all challenges by status for a user.
     * @summary List challenges
     * @param {string} xUserToken User token
     * @param {ListUserChallengesStatusEnum} [status] ExtChallenge status to query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAndPinsApi
     */
    listUserChallenges(xUserToken: string, status?: ListUserChallengesStatusEnum, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<ListUserChallenges200Response, any>>;
    /**
     * Get all the users under the entity, sorted by the create date DESC order.
     * @summary List users
     * @param {ListUsersPinStatusEnum} [pinStatus] PinStatus
     * @param {ListUsersSecurityQuestionStatusEnum} [securityQuestionStatus] SecurityQuestionStatus
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAndPinsApi
     */
    listUsers(pinStatus?: ListUsersPinStatusEnum, securityQuestionStatus?: ListUsersSecurityQuestionStatusEnum, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<ListUsers200Response, any>>;
    /**
     * Create a challenge to update a user\'s PIN via existing PIN.
     * @summary Create a challenge to update PIN
     * @param {string} xUserToken User token
     * @param {ChangePinRequest} changePinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAndPinsApi
     */
    updateUserPinChallenge(xUserToken: string, changePinRequest: ChangePinRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<UpdateUserPinChallenge200Response, any>>;
}
/**
 * @export
 */
declare const ListUserChallengesStatusEnum: {
    readonly Pending: "PENDING";
    readonly InProgress: "IN_PROGRESS";
};
type ListUserChallengesStatusEnum = typeof ListUserChallengesStatusEnum[keyof typeof ListUserChallengesStatusEnum];
/**
 * @export
 */
declare const ListUsersPinStatusEnum: {
    readonly Enabled: "ENABLED";
    readonly Unset: "UNSET";
    readonly Locked: "LOCKED";
};
type ListUsersPinStatusEnum = typeof ListUsersPinStatusEnum[keyof typeof ListUsersPinStatusEnum];
/**
 * @export
 */
declare const ListUsersSecurityQuestionStatusEnum: {
    readonly Enabled: "ENABLED";
    readonly Unset: "UNSET";
    readonly Locked: "LOCKED";
};
type ListUsersSecurityQuestionStatusEnum = typeof ListUsersSecurityQuestionStatusEnum[keyof typeof ListUsersSecurityQuestionStatusEnum];

/**
 * WalletsApi - axios parameter creator
 * @export
 */
declare const WalletsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Generates a challenge for creating a new user-controlled wallet or batch of wallets, specifying blockchain and wallet name.
     * @summary Create wallets
     * @param {string} xUserToken User token
     * @param {CreateEndUserWalletRequest} createEndUserWalletRequest walletResponse creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWallet: (xUserToken: string, createEndUserWalletRequest: CreateEndUserWalletRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Get a wallet
     * @param {string} id Wallet ID
     * @param {string} [xUserToken] User token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet: (id: string, xUserToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches the digital asset balance for a single user-controlled wallet using its unique identifier.
     * @summary Get token balance for a wallet
     * @param {string} id Wallet ID
     * @param {string} [xUserToken] User token
     * @param {boolean} [includeAll]
     * @param {string} [name] token name
     * @param {string} [tokenAddress] tokenAddress is a list of token addresses separated by comma
     * @param {string} [standard] token standard
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletBallance: (id: string, xUserToken?: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches the info for all NFTs stored in a single user-controlled wallet, using the wallets unique identifier.
     * @summary Get NFTs for a wallet
     * @param {string} id Wallet ID
     * @param {string} [xUserToken] User token
     * @param {boolean} [includeAll]
     * @param {string} [name] token name
     * @param {string} [tokenAddress] tokenAddress is a list of token addresses separated by comma
     * @param {string} [standard] token standard
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletNfts: (id: string, xUserToken?: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of all user-controlled wallets that fit the specified parameters.
     * @summary List wallets
     * @param {string} [xUserToken] User token
     * @param {string} [address] Address is the address of the wallet
     * @param {ListWalletsBlockchainEnum} [blockchain] Blockchain filters on the blockchain of the transaction
     * @param {string} [userId] ExtUserID filters on the userID of the transaction
     * @param {string} [walletSetId] WalletSetID is the wallet set the wallet belongs to
     * @param {string} [refId] Reference or description used to identify the wallet
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWallets: (xUserToken?: string, address?: string, blockchain?: ListWalletsBlockchainEnum, userId?: string, walletSetId?: string, refId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Update a wallet
     * @param {string} id Wallet ID
     * @param {ExtUpdateWalletMetadataRequest} extUpdateWalletMetadataRequest Wallet metadata update request
     * @param {string} [xUserToken] User token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWallet: (id: string, extUpdateWalletMetadataRequest: ExtUpdateWalletMetadataRequest, xUserToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WalletsApi - functional programming interface
 * @export
 */
declare const WalletsApiFp: (configuration?: Configuration) => {
    /**
     * Generates a challenge for creating a new user-controlled wallet or batch of wallets, specifying blockchain and wallet name.
     * @summary Create wallets
     * @param {string} xUserToken User token
     * @param {CreateEndUserWalletRequest} createEndUserWalletRequest walletResponse creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWallet(xUserToken: string, createEndUserWalletRequest: CreateEndUserWalletRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserWallet200Response>>;
    /**
     * Retrieves info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Get a wallet
     * @param {string} id Wallet ID
     * @param {string} [xUserToken] User token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet(id: string, xUserToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWallet200Response>>;
    /**
     * Fetches the digital asset balance for a single user-controlled wallet using its unique identifier.
     * @summary Get token balance for a wallet
     * @param {string} id Wallet ID
     * @param {string} [xUserToken] User token
     * @param {boolean} [includeAll]
     * @param {string} [name] token name
     * @param {string} [tokenAddress] tokenAddress is a list of token addresses separated by comma
     * @param {string} [standard] token standard
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletBallance(id: string, xUserToken?: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWalletBallance200Response>>;
    /**
     * Fetches the info for all NFTs stored in a single user-controlled wallet, using the wallets unique identifier.
     * @summary Get NFTs for a wallet
     * @param {string} id Wallet ID
     * @param {string} [xUserToken] User token
     * @param {boolean} [includeAll]
     * @param {string} [name] token name
     * @param {string} [tokenAddress] tokenAddress is a list of token addresses separated by comma
     * @param {string} [standard] token standard
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletNfts(id: string, xUserToken?: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWalletNfts200Response>>;
    /**
     * Retrieves a list of all user-controlled wallets that fit the specified parameters.
     * @summary List wallets
     * @param {string} [xUserToken] User token
     * @param {string} [address] Address is the address of the wallet
     * @param {ListWalletsBlockchainEnum} [blockchain] Blockchain filters on the blockchain of the transaction
     * @param {string} [userId] ExtUserID filters on the userID of the transaction
     * @param {string} [walletSetId] WalletSetID is the wallet set the wallet belongs to
     * @param {string} [refId] Reference or description used to identify the wallet
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWallets(xUserToken?: string, address?: string, blockchain?: ListWalletsBlockchainEnum, userId?: string, walletSetId?: string, refId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWallets200Response>>;
    /**
     * Updates info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Update a wallet
     * @param {string} id Wallet ID
     * @param {ExtUpdateWalletMetadataRequest} extUpdateWalletMetadataRequest Wallet metadata update request
     * @param {string} [xUserToken] User token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWallet(id: string, extUpdateWalletMetadataRequest: ExtUpdateWalletMetadataRequest, xUserToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWallet200Response>>;
};
/**
 * WalletsApi - factory interface
 * @export
 */
declare const WalletsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Generates a challenge for creating a new user-controlled wallet or batch of wallets, specifying blockchain and wallet name.
     * @summary Create wallets
     * @param {string} xUserToken User token
     * @param {CreateEndUserWalletRequest} createEndUserWalletRequest walletResponse creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWallet(xUserToken: string, createEndUserWalletRequest: CreateEndUserWalletRequest, options?: any): AxiosPromise<CreateUserWallet200Response>;
    /**
     * Retrieves info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Get a wallet
     * @param {string} id Wallet ID
     * @param {string} [xUserToken] User token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet(id: string, xUserToken?: string, options?: any): AxiosPromise<GetWallet200Response>;
    /**
     * Fetches the digital asset balance for a single user-controlled wallet using its unique identifier.
     * @summary Get token balance for a wallet
     * @param {string} id Wallet ID
     * @param {string} [xUserToken] User token
     * @param {boolean} [includeAll]
     * @param {string} [name] token name
     * @param {string} [tokenAddress] tokenAddress is a list of token addresses separated by comma
     * @param {string} [standard] token standard
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletBallance(id: string, xUserToken?: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<ListWalletBallance200Response>;
    /**
     * Fetches the info for all NFTs stored in a single user-controlled wallet, using the wallets unique identifier.
     * @summary Get NFTs for a wallet
     * @param {string} id Wallet ID
     * @param {string} [xUserToken] User token
     * @param {boolean} [includeAll]
     * @param {string} [name] token name
     * @param {string} [tokenAddress] tokenAddress is a list of token addresses separated by comma
     * @param {string} [standard] token standard
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletNfts(id: string, xUserToken?: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<ListWalletNfts200Response>;
    /**
     * Retrieves a list of all user-controlled wallets that fit the specified parameters.
     * @summary List wallets
     * @param {string} [xUserToken] User token
     * @param {string} [address] Address is the address of the wallet
     * @param {ListWalletsBlockchainEnum} [blockchain] Blockchain filters on the blockchain of the transaction
     * @param {string} [userId] ExtUserID filters on the userID of the transaction
     * @param {string} [walletSetId] WalletSetID is the wallet set the wallet belongs to
     * @param {string} [refId] Reference or description used to identify the wallet
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWallets(xUserToken?: string, address?: string, blockchain?: ListWalletsBlockchainEnum, userId?: string, walletSetId?: string, refId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<ListWallets200Response>;
    /**
     * Updates info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Update a wallet
     * @param {string} id Wallet ID
     * @param {ExtUpdateWalletMetadataRequest} extUpdateWalletMetadataRequest Wallet metadata update request
     * @param {string} [xUserToken] User token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWallet(id: string, extUpdateWalletMetadataRequest: ExtUpdateWalletMetadataRequest, xUserToken?: string, options?: any): AxiosPromise<UpdateWallet200Response>;
};
/**
 * WalletsApi - object-oriented interface
 * @export
 * @class WalletsApi
 * @extends {BaseAPI}
 */
declare class WalletsApi extends BaseAPI {
    /**
     * Generates a challenge for creating a new user-controlled wallet or batch of wallets, specifying blockchain and wallet name.
     * @summary Create wallets
     * @param {string} xUserToken User token
     * @param {CreateEndUserWalletRequest} createEndUserWalletRequest walletResponse creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    createUserWallet(xUserToken: string, createEndUserWalletRequest: CreateEndUserWalletRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateUserWallet200Response, any>>;
    /**
     * Retrieves info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Get a wallet
     * @param {string} id Wallet ID
     * @param {string} [xUserToken] User token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    getWallet(id: string, xUserToken?: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<GetWallet200Response, any>>;
    /**
     * Fetches the digital asset balance for a single user-controlled wallet using its unique identifier.
     * @summary Get token balance for a wallet
     * @param {string} id Wallet ID
     * @param {string} [xUserToken] User token
     * @param {boolean} [includeAll]
     * @param {string} [name] token name
     * @param {string} [tokenAddress] tokenAddress is a list of token addresses separated by comma
     * @param {string} [standard] token standard
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    listWalletBallance(id: string, xUserToken?: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<ListWalletBallance200Response, any>>;
    /**
     * Fetches the info for all NFTs stored in a single user-controlled wallet, using the wallets unique identifier.
     * @summary Get NFTs for a wallet
     * @param {string} id Wallet ID
     * @param {string} [xUserToken] User token
     * @param {boolean} [includeAll]
     * @param {string} [name] token name
     * @param {string} [tokenAddress] tokenAddress is a list of token addresses separated by comma
     * @param {string} [standard] token standard
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    listWalletNfts(id: string, xUserToken?: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<ListWalletNfts200Response, any>>;
    /**
     * Retrieves a list of all user-controlled wallets that fit the specified parameters.
     * @summary List wallets
     * @param {string} [xUserToken] User token
     * @param {string} [address] Address is the address of the wallet
     * @param {ListWalletsBlockchainEnum} [blockchain] Blockchain filters on the blockchain of the transaction
     * @param {string} [userId] ExtUserID filters on the userID of the transaction
     * @param {string} [walletSetId] WalletSetID is the wallet set the wallet belongs to
     * @param {string} [refId] Reference or description used to identify the wallet
     * @param {string} [from] From is the start time of the query, inclusive
     * @param {string} [to] To is the end time of the query, inclusive, default to current time
     * @param {string} [pageBefore] PageBefore is used to return items before the given item exclusively. SHOULD NOT be used in conjunction with pageAfter
     * @param {string} [pageAfter] PageAfter is used to return items after the given item exclusively. SHOULD NOT be used in conjunction with pageBefore
     * @param {number} [pageSize] PageSize is the number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    listWallets(xUserToken?: string, address?: string, blockchain?: ListWalletsBlockchainEnum, userId?: string, walletSetId?: string, refId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<ListWallets200Response, any>>;
    /**
     * Updates info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Update a wallet
     * @param {string} id Wallet ID
     * @param {ExtUpdateWalletMetadataRequest} extUpdateWalletMetadataRequest Wallet metadata update request
     * @param {string} [xUserToken] User token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    updateWallet(id: string, extUpdateWalletMetadataRequest: ExtUpdateWalletMetadataRequest, xUserToken?: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<UpdateWallet200Response, any>>;
}
/**
 * @export
 */
declare const ListWalletsBlockchainEnum: {
    readonly Eth: "ETH";
    readonly EthGoerli: "ETH-GOERLI";
    readonly Avax: "AVAX";
    readonly AvaxFuji: "AVAX-FUJI";
    readonly Matic: "MATIC";
    readonly MaticMumbai: "MATIC-MUMBAI";
};
type ListWalletsBlockchainEnum = typeof ListWalletsBlockchainEnum[keyof typeof ListWalletsBlockchainEnum];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

interface ClientConfig {
    /**
     * ApiKey that will be used to authenticate the request
     */
    apiKey: string;
    /**
     * Version of the client. Will be added to the user agent.
     */
    version: string;
    /**
     * Customized user agent. Will be added to the user agent.
     */
    userAgent?: string;
}
declare class UserControlledWalletsClient {
    Signing: ReturnType<typeof SigningApiFactory>;
    TokenLookup: ReturnType<typeof TokenLookupApiFactory>;
    Transactions: ReturnType<typeof TransactionsApiFactory>;
    UsersAndPins: ReturnType<typeof UsersAndPinsApiFactory>;
    Wallets: ReturnType<typeof WalletsApiFactory>;
    constructor(baseUrl: string, config: ClientConfig);
}

export { type AccelerateTransactionForEndUserRequest, type AccelerateTransactionForEndUserResponse, AccountType, type Balance, Blockchain, type CancelTransactionForEndUserRequest, type CancelTransactionForEndUserResponse, type Challenge, ChallengeStatusEnum, ChallengeTypeEnum, type ChangePinRequest, type ChangePinResponse, type ContractExecutionTxnPinCodeRequest, type CreateContractExecutionTransactionForEndUserResponse, type CreateEndUserWalletRequest, type CreateEndUserWalletResponse, type CreateTransferEstimateFee200Response, type CreateTransferTransactionForEndUserRequest, type CreateTransferTransactionForEndUserResponse, type CreateUserPinRestoreChallenge200Response, type CreateUserRequest, type CreateUserTransactionAccelerateChallenge200Response, type CreateUserTransactionCancelChallenge200Response, type CreateUserTransactionContractExecutionChallenge200Response, type CreateUserTransactionTransferChallenge200Response, type CreateUserWallet200Response, type CreateUserWithPinChallenge200Response, type CreateValidateAddress200Response, CustodyType, type EndUser, EndUserSecurityQuestionStatusEnum, EndUserStatus, type EstimateContractExecutionTransactionFeeRequest, type EstimateTransactionFeeResponse, type EstimateTransferTransactionFeeRequest, type EstimatedTransactionFee, type ExtGetAllEndUsersResponse, type ExtGetAllWalletsResponse, type ExtGetWalletByIDResponse, type ExtUpdateWalletMetadataRequest, type ExtWalletResponse, type ExtWalletResponseWallet, FeeLevel, type GenerateUserTokenRequest, type GenerateUserTokenResponse, type GetBalancesResponse, type GetEndUserByIDResponse, type GetEndUserChallengeByIDResponse, type GetEndUserChallengesResponse, type GetNftsResponse, type GetTokenByIDResponse, type GetTokenId200Response, type GetTransaction200Response, type GetTransactionByIDResponse, GetTransactionTxTypeEnum, type GetTransactionsResponse, type GetUser200Response, type GetUserByToken200Response, type GetUserChallenge200Response, type GetUserToken200Response, type GetWallet200Response, type ListTransactions200Response, ListTransactionsBlockchainEnum, ListTransactionsCustodyTypeEnum, ListTransactionsOperationEnum, ListTransactionsStateEnum, ListTransactionsTxTypeEnum, type ListUserChallenges200Response, ListUserChallengesStatusEnum, type ListUsers200Response, ListUsersPinStatusEnum, ListUsersSecurityQuestionStatusEnum, type ListWalletBallance200Response, type ListWalletNfts200Response, type ListWallets200Response, ListWalletsBlockchainEnum, type MetadataField, type ModelError, type Nft, Operation, type PinSecurityDetails, PinStatus, type RestorePinRequest, type RestorePinResponse, type SetPinAndInitWalletRequest, type SetPinRequest, type SetPinResponse, type SignMessageForEndUserRequest, type SignMessageForEndUserResponse, type SignTypedDataForEndUserRequest, type SignTypedDataForEndUserResponse, type SignUserMessage200Response, type SignUserTypedData200Response, SigningApi, SigningApiAxiosParamCreator, SigningApiFactory, SigningApiFp, TokenLookupApi, TokenLookupApiAxiosParamCreator, TokenLookupApiFactory, TokenLookupApiFp, type TokenResponse, TokenStandard, type Transaction, TransactionState, TransactionType, TransactionsApi, TransactionsApiAxiosParamCreator, TransactionsApiFactory, TransactionsApiFp, type UpdateUserPinChallenge200Response, type UpdateWallet200Response, UserControlledWalletsClient, UsersAndPinsApi, UsersAndPinsApiAxiosParamCreator, UsersAndPinsApiFactory, UsersAndPinsApiFp, type ValidateAddressRequest, type ValidateAddressResponse, type WalletResponse, WalletState, WalletsApi, WalletsApiAxiosParamCreator, WalletsApiFactory, WalletsApiFp };
